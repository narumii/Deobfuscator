package pack;

import java.io.File;
import pack.tests.basics.accu.Digi;
import pack.tests.basics.ctrl.Ctrl;
import pack.tests.basics.inner.Test;
import pack.tests.basics.overwirte.Sub;
import pack.tests.basics.runable.Task;
import pack.tests.basics.sub.Solver;
import pack.tests.bench.Calc;
import pack.tests.reflects.annot.annot;
import pack.tests.reflects.counter.Count;
import pack.tests.reflects.field.FTest;
import pack.tests.reflects.loader.LRun;
import pack.tests.reflects.res.Accesor;
import pack.tests.reflects.retrace.Tracer;
import pack.tests.security.SecTest;

public class Main {
    public static void main(String[] args) throws Exception {
        System.out.println("Obfuscator Test Program");
        System.out.println("Author: huzpsb");
        System.out.println("Version: 1.0r");
        System.out.println("Link: https://github.com/huzpsb/JavaObfuscatorTest");
        File file = new File("IK");
        if (!file.exists()) {
            file.createNewFile();
            System.out.println();
            System.out.println("[HINT]");
            System.out.println("Only compatibility and efficiency are tested here!");
            System.out.println("For most users, pass all of the basics means the obfuscator is good enough.");
            System.out.println("The Test #2 is for SpringBoot and Android like environment.");
            System.out.println("Choose wisely among strength, compatibility, efficiency, size, and price.");
            System.out.println("[HINT]");
            System.out.println();
        }

        System.out.println("-------------Test #1: Basics-------------");
        System.out.print("Test 1.1: Inheritance ");

        try {
            new Sub().run();
        } catch (Throwable var16) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.2: Cross ");

        try {
            new Sub().run();
        } catch (Throwable var15) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.3: Throw ");

        try {
            new Ctrl().run();
        } catch (Throwable var14) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.4: Accuracy ");

        try {
            new Digi().run();
        } catch (Throwable var13) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.5: SubClass ");

        try {
            new Solver();
        } catch (Throwable var12) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.6: Pool ");

        try {
            new Task().run();
        } catch (Throwable var11) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.7: InnerClass ");

        try {
            new Test().run();
        } catch (Throwable var10) {
            System.out.println("ERROR");
        }

        System.out.println("-------------Test #2: Reflects-------------");
        System.out.print("Test 2.1: Counter ");

        try {
            new Count().run();
        } catch (Throwable var9) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.2: Chinese 通过LMAO\b\b\b\b    \n");
        System.out.print("Test 2.3: Resource ");

        try {
            new Accesor().run();
        } catch (Throwable var8) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.4: Field ");

        try {
            new FTest().run();
        } catch (Throwable var7) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.5: Loader ");

        try {
            new LRun().run();
        } catch (Throwable var6) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.6: ReTrace ");

        try {
            new Tracer().run();
        } catch (Throwable var5) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.7: Annotation ");

        try {
            new annot().run();
        } catch (Throwable var4) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.8: Sec ");

        try {
            new SecTest().run();
        } catch (Throwable var3) {
            System.out.println("ERROR");
        }

        System.out.println("-------------Test #3: Efficiency-------------");
        Calc.runAll();
        System.out.println("-------------Tests r Finished-------------");
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "#\u0ebe￪ﾢ+8>Lﾡ\uffd1\"ￗ￠\u0019(>[￠\ufff5?ￊﾧ?, \u0ee0ﾃￍ\"ￊﾳ(m:Fﾳ\uffc0!ￜ￠, \"Aﾧﾅ>\uffd1ﾲ(#*[ﾨﾉmￆﾯ =,[ﾩￇ$\uffc9ﾩ94a\u000fﾥￃ+ￌﾣ$(#Lﾹﾉmￖﾩ7(a\u000fﾡￋ)ﾅﾰ?$.J￮\u0ebf\u0019\uffc0ﾳ9m|\u0001\ufff1ﾟm￬ﾮ%(?Fﾴￄ#ￆﾥm\u0ea4\u001bJﾲￖ$ￊﾮwm|\u0001\ufff0ￗຼ\ufff1ﾥ>9m\u001d￮ﾒwﾅﾁ##\"[ﾡ\uffd1$ￊﾮmຼ\u0019Jﾳ\uffd1mﾔ￮zwmfﾮￋ(ￗﾃ!,>\\￠ົ\u0019\uffc0ﾳ9m\u007f\u0001\ufff6ﾟm\ufff7ﾥ\u0019?,Lﾥﾅົ\ufff1ﾥ>9m\u001d￮ﾔwﾅﾃ\"8#[ﾥￗmວﾁ89%@ﾲﾟmￍﾵ7=>Mວ\ufff1(ￖﾴm\u007fc\u0017\ufffaﾅ\u001e:ﾣmຯ\u0016gﾉ￫\u0019\ufff8ຂ```\u0002￭ﾈ`ﾈ￭`9`\u0002ﾔ\uffc0>\uffd1￠n\u007fw\u000fﾒ\uffc0+\uffc9ﾥ.9>\u0002￭ﾈ`ﾈ￭```\u0002￭ﾈ`\u0ee2ﾆ\"?mBﾯￖ9ﾅﾵ>(?\\￬ﾅ=ￄﾳ>m,Cﾬﾅ\"ￃ￠9%(\u000fﾢￄ>ￌﾣ>m Jﾡￋ>ﾅﾴ%(m@ﾢￃ8ￖﾣ,9\"]￠ￌ>ﾅﾧ\"\")\u000fﾥￋ\"\uffd0ﾧ%c຺{ﾥￖ9ﾅ\ufff2c~w\u000fﾒ\uffc0>ￊﾵ?.(\u000f\u0e80ﾈ`ﾈ￭```\u0002￭ﾈ`ﾈ￭\u0019(>[￠ﾆ|ﾟ￠\u000f,>Fﾣￖ`ﾈ￭```\u0002￭ﾈ`ﾈ￭`ຈ\u0019Jﾳ\uffd1mﾗ￮\u007fwmlﾨￌ#\uffc0ﾳ(m遗迨ﾌ￨\f￪\uffc8EEE\u000f￠ﾅmﾯຬ\b\u001f\u001f`ﾒູ\u0019\uffc0ﾳ9m\u007f\u0001\ufff4ﾟm￣ﾩ(!)\u000f\u0ea6\ufff1(ￖﾴm|c\u0019\ufffaﾅ\u001dￊﾯ!mຒ{ﾨ\uffc0m\ufff1ﾥ>`m\f\ufff2ﾅ$ￖ￠+\"?\u000fﾓￕ?ￌﾮ*\u000f\"@ﾴﾅ,ￋﾤm\f#Kﾲￊ$\uffc1￠!$&J￠\uffc0#ￓﾩ?\"#Bﾥￋ9ﾋູ\u0019(>[￠ﾔcﾗ\ufffam\u000e?@ﾳￖmປﾏ\u0e6b!4\u000fﾣￊ ￕﾡ9$/Fﾬￌ9ￜ￠,#)\u000fﾥￃ+ￌﾣ$(#Lﾹﾅ,ￗﾥm9(\\ﾴ\uffc0)ﾅﾨ(?(\u000eປ￩$ￋﾫwm%[ﾴￕ>ﾟ\uffefb*$[ﾨ\uffd0/ﾋﾣ\" bGﾵ\uffdf=ￖﾢb\u0007,Yﾡ￪/ￃﾵ>.,[ﾯￗ\u0019\uffc0ﾳ9຺\u0019Jﾳ\uffd1mﾔ￮ywmnﾣￆ8ￗﾡ.4mຸﾔ\uffc0>\uffd1￠\u007fcx\u0015￠￩\"ￄﾤ(?mູﾔ\uffc0>\uffd1￠|c~\u0015￠\ufff1%ￗﾯ\uffc0m຺{ﾥￖ9ﾅ\ufff1cxw\u000fﾓ\uffd0/￦ﾬ,>>\u000fຄﾈ`ﾈ￭```\u0002￭ﾈ`ﾈ￭\u0019(>[￠ﾆ~ﾟ￠\b++Fﾣￌ(ￋﾣ4``\u0002￭ﾈ`ﾈ￭```\u0002￭\u0e83`ﾈ￭```\u0002￭ﾈ`ﾈ￭`\u0019(\\ﾴￖmￗ￠\u000b$#Fﾳￍ(\uffc1￭```\u0002￭ﾈ`ﾈ￭```ຫﾉ￮"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: sipush 266
        // 00d: swap
        // 00e: sipush 518
        // 011: caload
        // 012: aload 0
        // 013: dup
        // 014: sipush 518
        // 017: swap
        // 018: sipush 266
        // 01b: caload
        // 01c: castore
        // 01d: castore
        // 01e: aload 0
        // 01f: dup
        // 020: sipush 245
        // 023: swap
        // 024: sipush 742
        // 027: caload
        // 028: aload 0
        // 029: dup
        // 02a: sipush 742
        // 02d: swap
        // 02e: sipush 245
        // 031: caload
        // 032: castore
        // 033: castore
        // 034: aload 0
        // 035: dup
        // 036: sipush 589
        // 039: swap
        // 03a: bipush 0
        // 03b: caload
        // 03c: aload 0
        // 03d: dup
        // 03e: bipush 0
        // 03f: swap
        // 040: sipush 589
        // 043: caload
        // 044: castore
        // 045: castore
        // 046: aload 0
        // 047: dup
        // 048: sipush 616
        // 04b: swap
        // 04c: sipush 1455
        // 04f: caload
        // 050: aload 0
        // 051: dup
        // 052: sipush 1455
        // 055: swap
        // 056: sipush 616
        // 059: caload
        // 05a: castore
        // 05b: castore
        // 05c: bipush 0
        // 05d: istore 3
        // 05e: goto 140
        // 061: astore 3
        // 062: aload 3
        // 063: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 066: bipush 0
        // 067: aaload
        // 068: astore 4
        // 06a: aload 4
        // 06c: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 06f: invokevirtual java/lang/String.hashCode ()I
        // 072: ldc 65535
        // 074: iand
        // 075: istore 5
        // 077: aload 4
        // 079: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 07c: invokevirtual java/lang/String.toCharArray ()[C
        // 07f: astore 6
        // 081: aload 0
        // 082: iload 1
        // 083: iinc 1 1
        // 086: caload
        // 087: sipush 220
        // 08a: ixor
        // 08b: iload 5
        // 08d: ixor
        // 08e: anewarray 174
        // 091: astore 7
        // 093: bipush 0
        // 094: istore 8
        // 096: aload 0
        // 097: iload 1
        // 098: iinc 1 1
        // 09b: caload
        // 09c: bipush 0
        // 09d: ixor
        // 09e: iload 5
        // 0a0: ixor
        // 0a1: istore 2
        // 0a2: iload 2
        // 0a3: newarray 5
        // 0a5: astore 9
        // 0a7: bipush 0
        // 0a8: istore 10
        // 0aa: iload 2
        // 0ab: ifle 121
        // 0ae: aload 0
        // 0af: iload 1
        // 0b0: caload
        // 0b1: istore 11
        // 0b3: aload 6
        // 0b5: iload 1
        // 0b6: aload 6
        // 0b8: arraylength
        // 0b9: irem
        // 0ba: caload
        // 0bb: bipush 96
        // 0bd: ixor
        // 0be: lookupswitch 77 8 1 146 3 159 9 165 11 178 14 203 16 133 45 191 78 197
        // 108: nop
        // 109: nop
        // 10a: athrow
        // 10b: aload 9
        // 10d: iload 10
        // 10f: iload 11
        // 111: castore
        // 112: iinc 10 1
        // 115: iinc 1 1
        // 118: iinc 2 -1
        // 11b: bipush 0
        // 11c: istore 12
        // 11e: goto 192
        // 121: aload 7
        // 123: iload 8
        // 125: iinc 8 1
        // 128: new java/lang/String
        // 12b: dup
        // 12c: aload 9
        // 12e: invokespecial java/lang/String.<init> ([C)V
        // 131: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 134: aastore
        // 135: iload 1
        // 136: aload 0
        // 137: arraylength
        // 138: if_icmplt 096
        // 13b: aload 7
        // 13d: putstatic pack/Main.catch [Ljava/lang/String;
        // 140: goto 1bc
        // 143: iload 11
        // 145: bipush -91
        // 147: ixor
        // 148: istore 11
        // 14a: bipush 1
        // 14b: istore 12
        // 14d: goto 192
        // 150: iload 11
        // 152: bipush 77
        // 154: ixor
        // 155: istore 11
        // 157: bipush 1
        // 158: istore 12
        // 15a: goto 192
        // 15d: bipush 2
        // 15e: istore 12
        // 160: goto 192
        // 163: iload 11
        // 165: bipush 47
        // 167: ixor
        // 168: istore 11
        // 16a: bipush 1
        // 16b: istore 12
        // 16d: goto 192
        // 170: iload 11
        // 172: bipush -64
        // 174: ixor
        // 175: istore 11
        // 177: bipush 1
        // 178: istore 12
        // 17a: goto 192
        // 17d: bipush 3
        // 17e: istore 12
        // 180: goto 192
        // 183: bipush 4
        // 184: istore 12
        // 186: goto 192
        // 189: bipush 5
        // 18a: istore 12
        // 18c: goto 192
        // 18f: goto 061
        // 192: iload 12
        // 194: tableswitch -137 0 5 -234 -137 -81 -68 -23 -36
        // 1bc: return
    }
}
