package pack.tests.reflects.counter;

public class Count {
    public void run() throws Throwable {
        if (Countee.class.getFields().length == 1
            && Countee.class.getDeclaredFields().length == 4
            && Countee.class.getMethods().length > 4
            && Countee.class.getDeclaredMethods().length == 4) {
            System.out.println("PASS");
        } else {
            System.out.println("FAIL");
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾀ\u0e7dໜ\r\ufff7ﾍ￭￮ﾀ￭\u0e7d"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 6
        // 00c: swap
        // 00d: bipush 10
        // 00f: caload
        // 010: aload 0
        // 011: dup
        // 012: bipush 10
        // 014: swap
        // 015: bipush 6
        // 017: caload
        // 018: castore
        // 019: castore
        // 01a: aload 0
        // 01b: dup
        // 01c: bipush 3
        // 01d: swap
        // 01e: bipush 2
        // 01f: caload
        // 020: aload 0
        // 021: dup
        // 022: bipush 2
        // 023: swap
        // 024: bipush 3
        // 025: caload
        // 026: castore
        // 027: castore
        // 028: aload 0
        // 029: dup
        // 02a: bipush 3
        // 02b: swap
        // 02c: bipush 0
        // 02d: caload
        // 02e: aload 0
        // 02f: dup
        // 030: bipush 0
        // 031: swap
        // 032: bipush 3
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 9
        // 03a: swap
        // 03b: bipush 14
        // 03d: caload
        // 03e: aload 0
        // 03f: dup
        // 040: bipush 14
        // 042: swap
        // 043: bipush 9
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: bipush 0
        // 049: istore 3
        // 04a: goto 164
        // 04d: astore 3
        // 04e: aload 3
        // 04f: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 052: bipush 0
        // 053: aaload
        // 054: astore 4
        // 056: aload 4
        // 058: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 05b: invokevirtual java/lang/String.hashCode ()I
        // 05e: ldc 65535
        // 060: iand
        // 061: istore 5
        // 063: aload 4
        // 065: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 068: invokevirtual java/lang/String.toCharArray ()[C
        // 06b: astore 6
        // 06d: aload 0
        // 06e: iload 1
        // 06f: iinc 1 1
        // 072: caload
        // 073: bipush 119
        // 075: ixor
        // 076: iload 5
        // 078: ixor
        // 079: anewarray 53
        // 07c: astore 7
        // 07e: bipush 0
        // 07f: istore 8
        // 081: aload 0
        // 082: iload 1
        // 083: iinc 1 1
        // 086: caload
        // 087: sipush 208
        // 08a: ixor
        // 08b: iload 5
        // 08d: ixor
        // 08e: istore 2
        // 08f: iload 2
        // 090: newarray 5
        // 092: astore 9
        // 094: bipush 0
        // 095: istore 10
        // 097: iload 2
        // 098: ifle 145
        // 09b: aload 0
        // 09c: iload 1
        // 09d: caload
        // 09e: istore 11
        // 0a0: aload 6
        // 0a2: iload 1
        // 0a3: aload 6
        // 0a5: arraylength
        // 0a6: irem
        // 0a7: caload
        // 0a8: bipush 28
        // 0aa: ixor
        // 0ab: lookupswitch 132 15 50 245 95 306 104 188 105 201 108 207 110 220 111 226 112 239 114 251 115 258 119 265 121 272 122 279 125 292 127 299
        // 12c: nop
        // 12d: nop
        // 12e: athrow
        // 12f: aload 9
        // 131: iload 10
        // 133: iload 11
        // 135: castore
        // 136: iinc 10 1
        // 139: iinc 1 1
        // 13c: iinc 2 -1
        // 13f: bipush 0
        // 140: istore 12
        // 142: goto 1e7
        // 145: aload 7
        // 147: iload 8
        // 149: iinc 8 1
        // 14c: new java/lang/String
        // 14f: dup
        // 150: aload 9
        // 152: invokespecial java/lang/String.<init> ([C)V
        // 155: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 158: aastore
        // 159: iload 1
        // 15a: aload 0
        // 15b: arraylength
        // 15c: if_icmplt 081
        // 15f: aload 7
        // 161: putstatic pack/tests/reflects/counter/Count.catch [Ljava/lang/String;
        // 164: goto 22c
        // 167: iload 11
        // 169: bipush -63
        // 16b: ixor
        // 16c: istore 11
        // 16e: bipush 1
        // 16f: istore 12
        // 171: goto 1e7
        // 174: bipush 2
        // 175: istore 12
        // 177: goto 1e7
        // 17a: iload 11
        // 17c: bipush 75
        // 17e: ixor
        // 17f: istore 11
        // 181: bipush 1
        // 182: istore 12
        // 184: goto 1e7
        // 187: bipush 3
        // 188: istore 12
        // 18a: goto 1e7
        // 18d: iload 11
        // 18f: bipush -66
        // 191: ixor
        // 192: istore 11
        // 194: bipush 1
        // 195: istore 12
        // 197: goto 1e7
        // 19a: bipush 4
        // 19b: istore 12
        // 19d: goto 1e7
        // 1a0: bipush 5
        // 1a1: istore 12
        // 1a3: goto 1e7
        // 1a6: bipush 6
        // 1a8: istore 12
        // 1aa: goto 1e7
        // 1ad: bipush 7
        // 1af: istore 12
        // 1b1: goto 1e7
        // 1b4: bipush 8
        // 1b6: istore 12
        // 1b8: goto 1e7
        // 1bb: bipush 9
        // 1bd: istore 12
        // 1bf: goto 1e7
        // 1c2: iload 11
        // 1c4: bipush 43
        // 1c6: ixor
        // 1c7: istore 11
        // 1c9: bipush 1
        // 1ca: istore 12
        // 1cc: goto 1e7
        // 1cf: bipush 10
        // 1d1: istore 12
        // 1d3: goto 1e7
        // 1d6: bipush 11
        // 1d8: istore 12
        // 1da: goto 1e7
        // 1dd: bipush 12
        // 1df: istore 12
        // 1e1: goto 1e7
        // 1e4: goto 04d
        // 1e7: iload 12
        // 1e9: tableswitch -98 0 12 -338 -186 -130 -111 -98 -92 -117 -79 -67 -73 -46 -60 -53
        // 22c: return
    }
}
