package pack.tests.reflects.res;

public class Accesor {
    public void run() {
        try {
            if (Accesor.class.getResourceAsStream("/pack/tests/reflects/res/file").read() != 97) {
                throw new RuntimeException();
            }

            if (Accesor.class.getResourceAsStream("file2").read() != 114) {
                throw new RuntimeException();
            }

            if (Accesor.class.getClassLoader().getResourceAsStream("pack/tests/reflects/res/file3").read() != 99) {
                throw new RuntimeException();
            }

            System.out.println("PASS");
        } catch (Exception var2) {
            System.out.println("FAIL");
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾡິﾐ_ﾓﾢອﾁﾐﾒﾫ\uffc8ﾴﾥmﾔﾳ\uffdeﾃﾥﾁﾬﾔﾣﾅﾳ\uffefﾲﾔﾳ\uffc8ﾗwﾬ{\ufff3ອ\uffefﾁﾐﾒﾫﾴ\uffc8ﾥmﾴﾳ\uffdeﾃﾥﾁﾬﾔﾣﾅﾳ\uffefﾲﾔﾳ\uffc8ﾗwﾬ{ີﾗﾩﾝﾴￃິญﾁﾉR"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 70
        // 00c: swap
        // 00d: bipush 15
        // 00f: caload
        // 010: aload 0
        // 011: dup
        // 012: bipush 15
        // 014: swap
        // 015: bipush 70
        // 017: caload
        // 018: castore
        // 019: castore
        // 01a: aload 0
        // 01b: dup
        // 01c: bipush 42
        // 01e: swap
        // 01f: bipush 43
        // 021: caload
        // 022: aload 0
        // 023: dup
        // 024: bipush 43
        // 026: swap
        // 027: bipush 42
        // 029: caload
        // 02a: castore
        // 02b: castore
        // 02c: aload 0
        // 02d: dup
        // 02e: bipush 73
        // 030: swap
        // 031: bipush 0
        // 032: caload
        // 033: aload 0
        // 034: dup
        // 035: bipush 0
        // 036: swap
        // 037: bipush 73
        // 039: caload
        // 03a: castore
        // 03b: castore
        // 03c: aload 0
        // 03d: dup
        // 03e: bipush 2
        // 03f: swap
        // 040: bipush 112
        // 042: caload
        // 043: aload 0
        // 044: dup
        // 045: bipush 112
        // 047: swap
        // 048: bipush 2
        // 049: caload
        // 04a: castore
        // 04b: castore
        // 04c: aload 0
        // 04d: dup
        // 04e: bipush 53
        // 050: swap
        // 051: bipush 71
        // 053: caload
        // 054: aload 0
        // 055: dup
        // 056: bipush 71
        // 058: swap
        // 059: bipush 53
        // 05b: caload
        // 05c: castore
        // 05d: castore
        // 05e: bipush 0
        // 05f: istore 3
        // 060: goto 16c
        // 063: astore 3
        // 064: aload 3
        // 065: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 068: bipush 0
        // 069: aaload
        // 06a: astore 4
        // 06c: aload 4
        // 06e: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 071: invokevirtual java/lang/String.hashCode ()I
        // 074: ldc 65535
        // 076: iand
        // 077: istore 5
        // 079: aload 4
        // 07b: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 07e: invokevirtual java/lang/String.toCharArray ()[C
        // 081: astore 6
        // 083: aload 0
        // 084: iload 1
        // 085: iinc 1 1
        // 088: caload
        // 089: sipush 161
        // 08c: ixor
        // 08d: iload 5
        // 08f: ixor
        // 090: anewarray 65
        // 093: astore 7
        // 095: bipush 0
        // 096: istore 8
        // 098: aload 0
        // 099: iload 1
        // 09a: iinc 1 1
        // 09d: caload
        // 09e: bipush 25
        // 0a0: ixor
        // 0a1: iload 5
        // 0a3: ixor
        // 0a4: istore 2
        // 0a5: iload 2
        // 0a6: newarray 5
        // 0a8: astore 9
        // 0aa: bipush 0
        // 0ab: istore 10
        // 0ad: iload 2
        // 0ae: ifle 14d
        // 0b1: aload 0
        // 0b2: iload 1
        // 0b3: caload
        // 0b4: istore 11
        // 0b6: aload 6
        // 0b8: iload 1
        // 0b9: aload 6
        // 0bb: arraylength
        // 0bc: irem
        // 0bd: caload
        // 0be: bipush 23
        // 0c0: ixor
        // 0c1: lookupswitch 118 13 57 264 86 250 99 174 100 187 101 193 103 206 113 212 114 225 116 231 118 237 120 257 123 271 124 278
        // 134: nop
        // 135: nop
        // 136: athrow
        // 137: aload 9
        // 139: iload 10
        // 13b: iload 11
        // 13d: castore
        // 13e: iinc 10 1
        // 141: iinc 1 1
        // 144: iinc 2 -1
        // 147: bipush 0
        // 148: istore 12
        // 14a: goto 1e1
        // 14d: aload 7
        // 14f: iload 8
        // 151: iinc 8 1
        // 154: new java/lang/String
        // 157: dup
        // 158: aload 9
        // 15a: invokespecial java/lang/String.<init> ([C)V
        // 15d: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 160: aastore
        // 161: iload 1
        // 162: aload 0
        // 163: arraylength
        // 164: if_icmplt 098
        // 167: aload 7
        // 169: putstatic pack/tests/reflects/res/Accesor.catch [Ljava/lang/String;
        // 16c: goto 21c
        // 16f: iload 11
        // 171: bipush -15
        // 173: ixor
        // 174: istore 11
        // 176: bipush 1
        // 177: istore 12
        // 179: goto 1e1
        // 17c: bipush 2
        // 17d: istore 12
        // 17f: goto 1e1
        // 182: iload 11
        // 184: bipush -25
        // 186: ixor
        // 187: istore 11
        // 189: bipush 1
        // 18a: istore 12
        // 18c: goto 1e1
        // 18f: bipush 3
        // 190: istore 12
        // 192: goto 1e1
        // 195: iload 11
        // 197: bipush -64
        // 199: ixor
        // 19a: istore 11
        // 19c: bipush 1
        // 19d: istore 12
        // 19f: goto 1e1
        // 1a2: bipush 4
        // 1a3: istore 12
        // 1a5: goto 1e1
        // 1a8: bipush 5
        // 1a9: istore 12
        // 1ab: goto 1e1
        // 1ae: iload 11
        // 1b0: bipush 30
        // 1b2: ixor
        // 1b3: istore 11
        // 1b5: bipush 1
        // 1b6: istore 12
        // 1b8: goto 1e1
        // 1bb: bipush 6
        // 1bd: istore 12
        // 1bf: goto 1e1
        // 1c2: bipush 7
        // 1c4: istore 12
        // 1c6: goto 1e1
        // 1c9: bipush 8
        // 1cb: istore 12
        // 1cd: goto 1e1
        // 1d0: bipush 9
        // 1d2: istore 12
        // 1d4: goto 1e1
        // 1d7: bipush 10
        // 1d9: istore 12
        // 1db: goto 1e1
        // 1de: goto 063
        // 1e1: iload 12
        // 1e3: tableswitch -84 0 10 -310 -172 -116 -103 -78 -65 -84 -59 -33 -53 -19
        // 21c: return
    }
}
