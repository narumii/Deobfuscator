package pack.tests.reflects.loader;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class LTest {
    public static byte[] readAllBytes(InputStream is) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];

        int bytesRead;
        while ((bytesRead = is.read(buffer)) != -1) {
            baos.write(buffer, 0, bytesRead);
        }

        return baos.toByteArray();
    }

    public void run() throws Exception {
        System.out.println(new String(readAllBytes(LTest.class.getResourceAsStream("TEST"))));
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾨ\u0ee8ﾹห\u0007ﾹ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 3
        // 00b: swap
        // 00c: bipush 0
        // 00d: caload
        // 00e: aload 0
        // 00f: dup
        // 010: bipush 0
        // 011: swap
        // 012: bipush 3
        // 013: caload
        // 014: castore
        // 015: castore
        // 016: aload 0
        // 017: dup
        // 018: bipush 5
        // 019: swap
        // 01a: bipush 7
        // 01c: caload
        // 01d: aload 0
        // 01e: dup
        // 01f: bipush 7
        // 021: swap
        // 022: bipush 5
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 4
        // 029: swap
        // 02a: bipush 4
        // 02b: caload
        // 02c: aload 0
        // 02d: dup
        // 02e: bipush 4
        // 02f: swap
        // 030: bipush 4
        // 031: caload
        // 032: castore
        // 033: castore
        // 034: bipush 0
        // 035: istore 3
        // 036: goto 150
        // 039: astore 3
        // 03a: aload 3
        // 03b: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 03e: bipush 0
        // 03f: aaload
        // 040: astore 4
        // 042: aload 4
        // 044: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 047: invokevirtual java/lang/String.hashCode ()I
        // 04a: ldc 65535
        // 04c: iand
        // 04d: istore 5
        // 04f: aload 4
        // 051: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 054: invokevirtual java/lang/String.toCharArray ()[C
        // 057: astore 6
        // 059: aload 0
        // 05a: iload 1
        // 05b: iinc 1 1
        // 05e: caload
        // 05f: sipush 131
        // 062: ixor
        // 063: iload 5
        // 065: ixor
        // 066: anewarray 52
        // 069: astore 7
        // 06b: bipush 0
        // 06c: istore 8
        // 06e: aload 0
        // 06f: iload 1
        // 070: iinc 1 1
        // 073: caload
        // 074: bipush 69
        // 076: ixor
        // 077: iload 5
        // 079: ixor
        // 07a: istore 2
        // 07b: iload 2
        // 07c: newarray 5
        // 07e: astore 9
        // 080: bipush 0
        // 081: istore 10
        // 083: iload 2
        // 084: ifle 131
        // 087: aload 0
        // 088: iload 1
        // 089: caload
        // 08a: istore 11
        // 08c: aload 6
        // 08e: iload 1
        // 08f: aload 6
        // 091: arraylength
        // 092: irem
        // 093: caload
        // 094: bipush 85
        // 096: ixor
        // 097: lookupswitch 132 15 1 201 25 279 33 188 37 214 38 220 39 226 48 239 49 245 51 251 52 258 54 265 57 272 58 286 62 306 123 293
        // 118: nop
        // 119: nop
        // 11a: athrow
        // 11b: aload 9
        // 11d: iload 10
        // 11f: iload 11
        // 121: castore
        // 122: iinc 10 1
        // 125: iinc 1 1
        // 128: iinc 2 -1
        // 12b: bipush 0
        // 12c: istore 12
        // 12e: goto 1d3
        // 131: aload 7
        // 133: iload 8
        // 135: iinc 8 1
        // 138: new java/lang/String
        // 13b: dup
        // 13c: aload 9
        // 13e: invokespecial java/lang/String.<init> ([C)V
        // 141: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 144: aastore
        // 145: iload 1
        // 146: aload 0
        // 147: arraylength
        // 148: if_icmplt 06e
        // 14b: aload 7
        // 14d: putstatic pack/tests/reflects/loader/LTest.catch [Ljava/lang/String;
        // 150: goto 218
        // 153: iload 11
        // 155: bipush -19
        // 157: ixor
        // 158: istore 11
        // 15a: bipush 1
        // 15b: istore 12
        // 15d: goto 1d3
        // 160: iload 11
        // 162: bipush -41
        // 164: ixor
        // 165: istore 11
        // 167: bipush 1
        // 168: istore 12
        // 16a: goto 1d3
        // 16d: bipush 2
        // 16e: istore 12
        // 170: goto 1d3
        // 173: bipush 3
        // 174: istore 12
        // 176: goto 1d3
        // 179: iload 11
        // 17b: bipush -78
        // 17d: ixor
        // 17e: istore 11
        // 180: bipush 1
        // 181: istore 12
        // 183: goto 1d3
        // 186: bipush 4
        // 187: istore 12
        // 189: goto 1d3
        // 18c: bipush 5
        // 18d: istore 12
        // 18f: goto 1d3
        // 192: bipush 6
        // 194: istore 12
        // 196: goto 1d3
        // 199: bipush 7
        // 19b: istore 12
        // 19d: goto 1d3
        // 1a0: bipush 8
        // 1a2: istore 12
        // 1a4: goto 1d3
        // 1a7: bipush 9
        // 1a9: istore 12
        // 1ab: goto 1d3
        // 1ae: bipush 10
        // 1b0: istore 12
        // 1b2: goto 1d3
        // 1b5: bipush 11
        // 1b7: istore 12
        // 1b9: goto 1d3
        // 1bc: iload 11
        // 1be: bipush 84
        // 1c0: ixor
        // 1c1: istore 11
        // 1c3: bipush 1
        // 1c4: istore 12
        // 1c6: goto 1d3
        // 1c9: bipush 12
        // 1cb: istore 12
        // 1cd: goto 1d3
        // 1d0: goto 039
        // 1d3: iload 12
        // 1d5: tableswitch -117 0 12 -338 -186 -130 -117 -104 -92 -73 -79 -60 -67 -46 -53 -32
        // 218: return
    }
}
