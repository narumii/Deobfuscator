package pack.tests.basics.cross;

public class Top extends Abst1 implements Inte {
    public void run() {
        if (this.add(1, 2) == 3 && this.mul(2, 3) == 6) {
            System.out.println("PASS");
        } else {
            System.out.println("FAIL");
        }
    }

    @Override
    public int add(int a, int b) {
        return a + b;
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "]\u0ef9oM_e\u0ef9\\hGà¹…"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 10
        // 00c: swap
        // 00d: bipush 4
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 4
        // 012: swap
        // 013: bipush 10
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 9
        // 01c: swap
        // 01d: bipush 10
        // 01f: caload
        // 020: aload 0
        // 021: dup
        // 022: bipush 10
        // 024: swap
        // 025: bipush 9
        // 027: caload
        // 028: castore
        // 029: castore
        // 02a: aload 0
        // 02b: dup
        // 02c: bipush 4
        // 02d: swap
        // 02e: bipush 0
        // 02f: caload
        // 030: aload 0
        // 031: dup
        // 032: bipush 0
        // 033: swap
        // 034: bipush 4
        // 035: caload
        // 036: castore
        // 037: castore
        // 038: aload 0
        // 039: dup
        // 03a: bipush 4
        // 03b: swap
        // 03c: bipush 11
        // 03e: caload
        // 03f: aload 0
        // 040: dup
        // 041: bipush 11
        // 043: swap
        // 044: bipush 4
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: aload 0
        // 049: dup
        // 04a: bipush 3
        // 04b: swap
        // 04c: bipush 1
        // 04d: caload
        // 04e: aload 0
        // 04f: dup
        // 050: bipush 1
        // 051: swap
        // 052: bipush 3
        // 053: caload
        // 054: castore
        // 055: castore
        // 056: bipush 0
        // 057: istore 3
        // 058: goto 164
        // 05b: astore 3
        // 05c: aload 3
        // 05d: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 060: bipush 0
        // 061: aaload
        // 062: astore 4
        // 064: aload 4
        // 066: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 069: invokevirtual java/lang/String.hashCode ()I
        // 06c: ldc 65535
        // 06e: iand
        // 06f: istore 5
        // 071: aload 4
        // 073: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 076: invokevirtual java/lang/String.toCharArray ()[C
        // 079: astore 6
        // 07b: aload 0
        // 07c: iload 1
        // 07d: iinc 1 1
        // 080: caload
        // 081: sipush 238
        // 084: ixor
        // 085: iload 5
        // 087: ixor
        // 088: anewarray 45
        // 08b: astore 7
        // 08d: bipush 0
        // 08e: istore 8
        // 090: aload 0
        // 091: iload 1
        // 092: iinc 1 1
        // 095: caload
        // 096: bipush 84
        // 098: ixor
        // 099: iload 5
        // 09b: ixor
        // 09c: istore 2
        // 09d: iload 2
        // 09e: newarray 5
        // 0a0: astore 9
        // 0a2: bipush 0
        // 0a3: istore 10
        // 0a5: iload 2
        // 0a6: ifle 145
        // 0a9: aload 0
        // 0aa: iload 1
        // 0ab: caload
        // 0ac: istore 11
        // 0ae: aload 6
        // 0b0: iload 1
        // 0b1: aload 6
        // 0b3: arraylength
        // 0b4: irem
        // 0b5: caload
        // 0b6: bipush 106
        // 0b8: ixor
        // 0b9: lookupswitch 118 13 1 174 3 187 5 206 8 212 9 218 11 231 15 237 24 244 25 251 26 258 30 265 62 272 68 193
        // 12c: nop
        // 12d: nop
        // 12e: athrow
        // 12f: aload 9
        // 131: iload 10
        // 133: iload 11
        // 135: castore
        // 136: iinc 10 1
        // 139: iinc 1 1
        // 13c: iinc 2 -1
        // 13f: bipush 0
        // 140: istore 12
        // 142: goto 1d3
        // 145: aload 7
        // 147: iload 8
        // 149: iinc 8 1
        // 14c: new java/lang/String
        // 14f: dup
        // 150: aload 9
        // 152: invokespecial java/lang/String.<init> ([C)V
        // 155: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 158: aastore
        // 159: iload 1
        // 15a: aload 0
        // 15b: arraylength
        // 15c: if_icmplt 090
        // 15f: aload 7
        // 161: putstatic pack/tests/basics/cross/Top.catch [Ljava/lang/String;
        // 164: goto 214
        // 167: iload 11
        // 169: bipush 12
        // 16b: ixor
        // 16c: istore 11
        // 16e: bipush 1
        // 16f: istore 12
        // 171: goto 1d3
        // 174: bipush 2
        // 175: istore 12
        // 177: goto 1d3
        // 17a: iload 11
        // 17c: bipush 20
        // 17e: ixor
        // 17f: istore 11
        // 181: bipush 1
        // 182: istore 12
        // 184: goto 1d3
        // 187: bipush 3
        // 188: istore 12
        // 18a: goto 1d3
        // 18d: bipush 4
        // 18e: istore 12
        // 190: goto 1d3
        // 193: iload 11
        // 195: bipush 41
        // 197: ixor
        // 198: istore 11
        // 19a: bipush 1
        // 19b: istore 12
        // 19d: goto 1d3
        // 1a0: bipush 5
        // 1a1: istore 12
        // 1a3: goto 1d3
        // 1a6: bipush 6
        // 1a8: istore 12
        // 1aa: goto 1d3
        // 1ad: bipush 7
        // 1af: istore 12
        // 1b1: goto 1d3
        // 1b4: bipush 8
        // 1b6: istore 12
        // 1b8: goto 1d3
        // 1bb: bipush 9
        // 1bd: istore 12
        // 1bf: goto 1d3
        // 1c2: bipush 10
        // 1c4: istore 12
        // 1c6: goto 1d3
        // 1c9: bipush 11
        // 1cb: istore 12
        // 1cd: goto 1d3
        // 1d0: goto 05b
        // 1d3: iload 12
        // 1d5: tableswitch -26 0 11 -304 -166 -110 -97 -78 -72 -91 -66 -53 -40 -26 -33
        // 214: return
    }
}
