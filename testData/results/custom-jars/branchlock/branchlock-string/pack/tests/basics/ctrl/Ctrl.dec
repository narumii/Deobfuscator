package pack.tests.basics.ctrl;

public class Ctrl {
    private String ret = "FAIL";

    public void runt() {
        if (!"a".equals("b")) {
            throw new UnsupportedOperationException();
        }
    }

    public void runf() {
        try {
            this.runt();
        } catch (RuntimeException var3) {
            this.ret = "PASS";
        }

        try {
            this.runt();
            this.ret = "FAIL";
        } catch (Exception var2) {
        }
    }

    public void run() {
        this.runf();
        System.out.println(this.ret);
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ຑຑￍສ￪ດￊﾶﾤﾤດ\ufff8ￛﾾￇ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 11
        // 00c: swap
        // 00d: bipush 2
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 2
        // 012: swap
        // 013: bipush 11
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 3
        // 01b: swap
        // 01c: bipush 0
        // 01d: caload
        // 01e: aload 0
        // 01f: dup
        // 020: bipush 0
        // 021: swap
        // 022: bipush 3
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 14
        // 02a: swap
        // 02b: bipush 21
        // 02d: caload
        // 02e: aload 0
        // 02f: dup
        // 030: bipush 21
        // 032: swap
        // 033: bipush 14
        // 035: caload
        // 036: castore
        // 037: castore
        // 038: bipush 0
        // 039: istore 3
        // 03a: goto 144
        // 03d: astore 3
        // 03e: aload 3
        // 03f: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 042: bipush 0
        // 043: aaload
        // 044: astore 4
        // 046: aload 4
        // 048: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 04b: invokevirtual java/lang/String.hashCode ()I
        // 04e: ldc 65535
        // 050: iand
        // 051: istore 5
        // 053: aload 4
        // 055: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 058: invokevirtual java/lang/String.toCharArray ()[C
        // 05b: astore 6
        // 05d: aload 0
        // 05e: iload 1
        // 05f: iinc 1 1
        // 062: caload
        // 063: bipush 7
        // 065: ixor
        // 066: iload 5
        // 068: ixor
        // 069: anewarray 24
        // 06c: astore 7
        // 06e: bipush 0
        // 06f: istore 8
        // 071: aload 0
        // 072: iload 1
        // 073: iinc 1 1
        // 076: caload
        // 077: bipush 57
        // 079: ixor
        // 07a: iload 5
        // 07c: ixor
        // 07d: istore 2
        // 07e: iload 2
        // 07f: newarray 5
        // 081: astore 9
        // 083: bipush 0
        // 084: istore 10
        // 086: iload 2
        // 087: ifle 125
        // 08a: aload 0
        // 08b: iload 1
        // 08c: caload
        // 08d: istore 11
        // 08f: aload 6
        // 091: iload 1
        // 092: aload 6
        // 094: arraylength
        // 095: irem
        // 096: caload
        // 097: bipush 43
        // 099: ixor
        // 09a: lookupswitch 117 13 5 199 64 173 66 186 71 205 72 211 73 230 74 236 78 243 88 250 89 263 91 270 95 277 104 224
        // 10c: nop
        // 10d: nop
        // 10e: athrow
        // 10f: aload 9
        // 111: iload 10
        // 113: iload 11
        // 115: castore
        // 116: iinc 10 1
        // 119: iinc 1 1
        // 11c: iinc 2 -1
        // 11f: bipush 0
        // 120: istore 12
        // 122: goto 1b9
        // 125: aload 7
        // 127: iload 8
        // 129: iinc 8 1
        // 12c: new java/lang/String
        // 12f: dup
        // 130: aload 9
        // 132: invokespecial java/lang/String.<init> ([C)V
        // 135: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 138: aastore
        // 139: iload 1
        // 13a: aload 0
        // 13b: arraylength
        // 13c: if_icmplt 071
        // 13f: aload 7
        // 141: putstatic pack/tests/basics/ctrl/Ctrl.catch [Ljava/lang/String;
        // 144: goto 1f4
        // 147: iload 11
        // 149: bipush -2
        // 14b: ixor
        // 14c: istore 11
        // 14e: bipush 1
        // 14f: istore 12
        // 151: goto 1b9
        // 154: iload 11
        // 156: bipush -117
        // 158: ixor
        // 159: istore 11
        // 15b: bipush 1
        // 15c: istore 12
        // 15e: goto 1b9
        // 161: bipush 2
        // 162: istore 12
        // 164: goto 1b9
        // 167: bipush 3
        // 168: istore 12
        // 16a: goto 1b9
        // 16d: iload 11
        // 16f: bipush -102
        // 171: ixor
        // 172: istore 11
        // 174: bipush 1
        // 175: istore 12
        // 177: goto 1b9
        // 17a: bipush 4
        // 17b: istore 12
        // 17d: goto 1b9
        // 180: bipush 5
        // 181: istore 12
        // 183: goto 1b9
        // 186: bipush 6
        // 188: istore 12
        // 18a: goto 1b9
        // 18d: bipush 7
        // 18f: istore 12
        // 191: goto 1b9
        // 194: iload 11
        // 196: bipush -9
        // 198: ixor
        // 199: istore 11
        // 19b: bipush 1
        // 19c: istore 12
        // 19e: goto 1b9
        // 1a1: bipush 8
        // 1a3: istore 12
        // 1a5: goto 1b9
        // 1a8: bipush 9
        // 1aa: istore 12
        // 1ac: goto 1b9
        // 1af: bipush 10
        // 1b1: istore 12
        // 1b3: goto 1b9
        // 1b6: goto 03d
        // 1b9: iload 12
        // 1bb: tableswitch -103 0 10 -309 -172 -103 -90 -116 -84 -78 -53 -65 -26 -39
        // 1f4: return
    }
}
