package pack.tests.basics.runable;

import java.util.concurrent.RejectedExecutionException;

public class Task {
    public void run() throws Exception {
        Exec e1 = new Exec(2);
        Exec e2 = new Exec(3);
        Exec e3 = new Exec(100);

        try {
            Pool.tpe.submit(e2::doAdd);

            try {
                Thread.sleep(50L);
            } catch (InterruptedException var6) {
            }

            Pool.tpe.submit(() -> {
                int ix = Exec.i;
                e1.doAdd();
                Exec.i += ix;
            });

            try {
                Thread.sleep(50L);
            } catch (InterruptedException var5) {
            }

            Pool.tpe.submit(e3::doAdd);
        } catch (RejectedExecutionException var7) {
            Exec.i += 10;
        }

        Thread.sleep(300L);
        if (Exec.i == 30) {
            System.out.println("PASS");
        } else {
            System.out.println("FAIL");
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ￚฟz}u}ฟ\u0e66\uffd9po"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 8
        // 00c: swap
        // 00d: bipush 9
        // 00f: caload
        // 010: aload 0
        // 011: dup
        // 012: bipush 9
        // 014: swap
        // 015: bipush 8
        // 017: caload
        // 018: castore
        // 019: castore
        // 01a: aload 0
        // 01b: dup
        // 01c: bipush 5
        // 01d: swap
        // 01e: bipush 8
        // 020: caload
        // 021: aload 0
        // 022: dup
        // 023: bipush 8
        // 025: swap
        // 026: bipush 5
        // 027: caload
        // 028: castore
        // 029: castore
        // 02a: aload 0
        // 02b: dup
        // 02c: bipush 7
        // 02e: swap
        // 02f: bipush 0
        // 030: caload
        // 031: aload 0
        // 032: dup
        // 033: bipush 0
        // 034: swap
        // 035: bipush 7
        // 037: caload
        // 038: castore
        // 039: castore
        // 03a: aload 0
        // 03b: dup
        // 03c: bipush 0
        // 03d: swap
        // 03e: bipush 11
        // 040: caload
        // 041: aload 0
        // 042: dup
        // 043: bipush 11
        // 045: swap
        // 046: bipush 0
        // 047: caload
        // 048: castore
        // 049: castore
        // 04a: bipush 0
        // 04b: istore 3
        // 04c: goto 168
        // 04f: astore 3
        // 050: aload 3
        // 051: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 054: bipush 0
        // 055: aaload
        // 056: astore 4
        // 058: aload 4
        // 05a: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 05d: invokevirtual java/lang/String.hashCode ()I
        // 060: ldc 65535
        // 062: iand
        // 063: istore 5
        // 065: aload 4
        // 067: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 06a: invokevirtual java/lang/String.toCharArray ()[C
        // 06d: astore 6
        // 06f: aload 0
        // 070: iload 1
        // 071: iinc 1 1
        // 074: caload
        // 075: sipush 205
        // 078: ixor
        // 079: iload 5
        // 07b: ixor
        // 07c: anewarray 107
        // 07f: astore 7
        // 081: bipush 0
        // 082: istore 8
        // 084: aload 0
        // 085: iload 1
        // 086: iinc 1 1
        // 089: caload
        // 08a: sipush 178
        // 08d: ixor
        // 08e: iload 5
        // 090: ixor
        // 091: istore 2
        // 092: iload 2
        // 093: newarray 5
        // 095: astore 9
        // 097: bipush 0
        // 098: istore 10
        // 09a: iload 2
        // 09b: ifle 149
        // 09e: aload 0
        // 09f: iload 1
        // 0a0: caload
        // 0a1: istore 11
        // 0a3: aload 6
        // 0a5: iload 1
        // 0a6: aload 6
        // 0a8: arraylength
        // 0a9: irem
        // 0aa: caload
        // 0ab: sipush 246
        // 0ae: ixor
        // 0af: lookupswitch 132 15 130 188 131 214 132 220 133 226 134 239 147 245 148 251 149 258 151 265 152 279 154 292 157 299 159 306 162 201 216 272
        // 130: nop
        // 131: nop
        // 132: athrow
        // 133: aload 9
        // 135: iload 10
        // 137: iload 11
        // 139: castore
        // 13a: iinc 10 1
        // 13d: iinc 1 1
        // 140: iinc 2 -1
        // 143: bipush 0
        // 144: istore 12
        // 146: goto 1eb
        // 149: aload 7
        // 14b: iload 8
        // 14d: iinc 8 1
        // 150: new java/lang/String
        // 153: dup
        // 154: aload 9
        // 156: invokespecial java/lang/String.<init> ([C)V
        // 159: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 15c: aastore
        // 15d: iload 1
        // 15e: aload 0
        // 15f: arraylength
        // 160: if_icmplt 084
        // 163: aload 7
        // 165: putstatic pack/tests/basics/runable/Task.catch [Ljava/lang/String;
        // 168: goto 230
        // 16b: iload 11
        // 16d: bipush 60
        // 16f: ixor
        // 170: istore 11
        // 172: bipush 1
        // 173: istore 12
        // 175: goto 1eb
        // 178: iload 11
        // 17a: bipush 93
        // 17c: ixor
        // 17d: istore 11
        // 17f: bipush 1
        // 180: istore 12
        // 182: goto 1eb
        // 185: bipush 2
        // 186: istore 12
        // 188: goto 1eb
        // 18b: bipush 3
        // 18c: istore 12
        // 18e: goto 1eb
        // 191: iload 11
        // 193: bipush -118
        // 195: ixor
        // 196: istore 11
        // 198: bipush 1
        // 199: istore 12
        // 19b: goto 1eb
        // 19e: bipush 4
        // 19f: istore 12
        // 1a1: goto 1eb
        // 1a4: bipush 5
        // 1a5: istore 12
        // 1a7: goto 1eb
        // 1aa: bipush 6
        // 1ac: istore 12
        // 1ae: goto 1eb
        // 1b1: bipush 7
        // 1b3: istore 12
        // 1b5: goto 1eb
        // 1b8: bipush 8
        // 1ba: istore 12
        // 1bc: goto 1eb
        // 1bf: bipush 9
        // 1c1: istore 12
        // 1c3: goto 1eb
        // 1c6: iload 11
        // 1c8: bipush 67
        // 1ca: ixor
        // 1cb: istore 11
        // 1cd: bipush 1
        // 1ce: istore 12
        // 1d0: goto 1eb
        // 1d3: bipush 10
        // 1d5: istore 12
        // 1d7: goto 1eb
        // 1da: bipush 11
        // 1dc: istore 12
        // 1de: goto 1eb
        // 1e1: bipush 12
        // 1e3: istore 12
        // 1e5: goto 1eb
        // 1e8: goto 04f
        // 1eb: iload 12
        // 1ed: tableswitch -339 0 12 -339 -186 -117 -104 -98 -130 -92 -73 -60 -53 -39 -46 -26
        // 230: return
    }
}
