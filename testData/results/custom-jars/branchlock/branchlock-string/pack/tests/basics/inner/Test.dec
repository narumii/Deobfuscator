package pack.tests.basics.inner;

public class Test {
    public void run() {
        Exec exec = new Exec();
        Exec.Inner inner1 = exec.new Inner(3);
        inner1.doAdd();
        Exec.Inner inner2 = exec.new Inner(100);
        inner2.doAdd();
        if (exec.fuss == 108) {
            System.out.println("PASS");
        } else {
            System.out.println("ERROR");
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾖ\u0e6dￍﾅ-\uffd8\u0e6cﾗﾖￏ1ใ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 7
        // 00c: swap
        // 00d: bipush 5
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 5
        // 012: swap
        // 013: bipush 7
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 8
        // 01c: swap
        // 01d: bipush 11
        // 01f: caload
        // 020: aload 0
        // 021: dup
        // 022: bipush 11
        // 024: swap
        // 025: bipush 8
        // 027: caload
        // 028: castore
        // 029: castore
        // 02a: aload 0
        // 02b: dup
        // 02c: bipush 8
        // 02e: swap
        // 02f: bipush 0
        // 030: caload
        // 031: aload 0
        // 032: dup
        // 033: bipush 0
        // 034: swap
        // 035: bipush 8
        // 037: caload
        // 038: castore
        // 039: castore
        // 03a: aload 0
        // 03b: dup
        // 03c: bipush 2
        // 03d: swap
        // 03e: bipush 16
        // 040: caload
        // 041: aload 0
        // 042: dup
        // 043: bipush 16
        // 045: swap
        // 046: bipush 2
        // 047: caload
        // 048: castore
        // 049: castore
        // 04a: bipush 0
        // 04b: istore 3
        // 04c: goto 158
        // 04f: astore 3
        // 050: aload 3
        // 051: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 054: bipush 0
        // 055: aaload
        // 056: astore 4
        // 058: aload 4
        // 05a: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 05d: invokevirtual java/lang/String.hashCode ()I
        // 060: ldc 65535
        // 062: iand
        // 063: istore 5
        // 065: aload 4
        // 067: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 06a: invokevirtual java/lang/String.toCharArray ()[C
        // 06d: astore 6
        // 06f: aload 0
        // 070: iload 1
        // 071: iinc 1 1
        // 074: caload
        // 075: sipush 232
        // 078: ixor
        // 079: iload 5
        // 07b: ixor
        // 07c: anewarray 58
        // 07f: astore 7
        // 081: bipush 0
        // 082: istore 8
        // 084: aload 0
        // 085: iload 1
        // 086: iinc 1 1
        // 089: caload
        // 08a: sipush 192
        // 08d: ixor
        // 08e: iload 5
        // 090: ixor
        // 091: istore 2
        // 092: iload 2
        // 093: newarray 5
        // 095: astore 9
        // 097: bipush 0
        // 098: istore 10
        // 09a: iload 2
        // 09b: ifle 139
        // 09e: aload 0
        // 09f: iload 1
        // 0a0: caload
        // 0a1: istore 11
        // 0a3: aload 6
        // 0a5: iload 1
        // 0a6: aload 6
        // 0a8: arraylength
        // 0a9: irem
        // 0aa: caload
        // 0ab: sipush 165
        // 0ae: ixor
        // 0af: lookupswitch 116 13 139 217 192 172 196 185 198 198 199 211 203 223 204 229 206 235 209 242 213 256 214 263 215 270 241 249
        // 120: nop
        // 121: nop
        // 122: athrow
        // 123: aload 9
        // 125: iload 10
        // 127: iload 11
        // 129: castore
        // 12a: iinc 10 1
        // 12d: iinc 1 1
        // 130: iinc 2 -1
        // 133: bipush 0
        // 134: istore 12
        // 136: goto 1c7
        // 139: aload 7
        // 13b: iload 8
        // 13d: iinc 8 1
        // 140: new java/lang/String
        // 143: dup
        // 144: aload 9
        // 146: invokespecial java/lang/String.<init> ([C)V
        // 149: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 14c: aastore
        // 14d: iload 1
        // 14e: aload 0
        // 14f: arraylength
        // 150: if_icmplt 084
        // 153: aload 7
        // 155: putstatic pack/tests/basics/inner/Test.catch [Ljava/lang/String;
        // 158: goto 208
        // 15b: iload 11
        // 15d: bipush -60
        // 15f: ixor
        // 160: istore 11
        // 162: bipush 1
        // 163: istore 12
        // 165: goto 1c7
        // 168: iload 11
        // 16a: bipush 126
        // 16c: ixor
        // 16d: istore 11
        // 16f: bipush 1
        // 170: istore 12
        // 172: goto 1c7
        // 175: iload 11
        // 177: bipush -99
        // 179: ixor
        // 17a: istore 11
        // 17c: bipush 1
        // 17d: istore 12
        // 17f: goto 1c7
        // 182: bipush 2
        // 183: istore 12
        // 185: goto 1c7
        // 188: bipush 3
        // 189: istore 12
        // 18b: goto 1c7
        // 18e: bipush 4
        // 18f: istore 12
        // 191: goto 1c7
        // 194: bipush 5
        // 195: istore 12
        // 197: goto 1c7
        // 19a: bipush 6
        // 19c: istore 12
        // 19e: goto 1c7
        // 1a1: bipush 7
        // 1a3: istore 12
        // 1a5: goto 1c7
        // 1a8: bipush 8
        // 1aa: istore 12
        // 1ac: goto 1c7
        // 1af: bipush 9
        // 1b1: istore 12
        // 1b3: goto 1c7
        // 1b6: bipush 10
        // 1b8: istore 12
        // 1ba: goto 1c7
        // 1bd: bipush 11
        // 1bf: istore 12
        // 1c1: goto 1c7
        // 1c4: goto 04f
        // 1c7: iload 12
        // 1c9: tableswitch -97 0 11 -303 -166 -110 -97 -65 -59 -71 -47 -53 -40 -84 -19
        // 208: return
    }
}
