package pack;

import java.io.File;
import pack.tests.basics.accu.Digi;
import pack.tests.basics.ctrl.Ctrl;
import pack.tests.basics.inner.Test;
import pack.tests.basics.overwirte.Sub;
import pack.tests.basics.runable.Task;
import pack.tests.basics.sub.Solver;
import pack.tests.bench.Calc;
import pack.tests.reflects.annot.annot;
import pack.tests.reflects.counter.Count;
import pack.tests.reflects.field.FTest;
import pack.tests.reflects.loader.LRun;
import pack.tests.reflects.res.Accesor;
import pack.tests.reflects.retrace.Tracer;
import pack.tests.security.SecTest;

public class Main {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public static void main(String[] var0) {
        System.out
            .println(
                "-----------------------------------------------------------------------------------------\n| This java application has been obfuscated using a demo version of Branchlock 4.       |\n| Did you know that anyone can read the source code of your exported java software?     |\n| For more information about how to protect your projects, visit https://branchlock.net |\n-----------------------------------------------------------------------------------------\n"
            );
        System.out.println("Obfuscator Test Program");
        System.out.println("Author: huzpsb");
        System.out.println("Version: 1.0r");
        System.out.println("Link: https://github.com/huzpsb/JavaObfuscatorTest");
        File var1 = new File("IK");
        if (!var1.exists()) {
            var1.createNewFile();
            System.out.println();
            System.out.println("[HINT]");
            System.out.println("Only compatibility and efficiency are tested here!");
            System.out.println("For most users, pass all of the basics means the obfuscator is good enough.");
            System.out.println("The Test #2 is for SpringBoot and Android like environment.");
            System.out.println("Choose wisely among strength, compatibility, efficiency, size, and price.");
            System.out.println("[HINT]");
            System.out.println();
        }

        System.out.println("-------------Test #1: Basics-------------");
        System.out.print("Test 1.1: Inheritance ");

        try {
            new Sub().run();
        } catch (Throwable var15) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.2: Cross ");

        try {
            new Sub().run();
        } catch (Throwable var14) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.3: Throw ");

        try {
            new Ctrl().run();
        } catch (Throwable var13) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.4: Accuracy ");

        try {
            new Digi().run();
        } catch (Throwable var12) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.5: SubClass ");

        try {
            new Solver();
        } catch (Throwable var11) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.6: Pool ");

        try {
            new Task().run();
        } catch (Throwable var10) {
            System.out.println("ERROR");
        }

        System.out.print("Test 1.7: InnerClass ");

        try {
            new Test().run();
        } catch (Throwable var9) {
            System.out.println("ERROR");
        }

        System.out.println("-------------Test #2: Reflects-------------");
        System.out.print("Test 2.1: Counter ");

        try {
            new Count().run();
        } catch (Throwable var8) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.2: Chinese 通过LMAO\b\b\b\b    \n");
        System.out.print("Test 2.3: Resource ");

        try {
            new Accesor().run();
        } catch (Throwable var7) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.4: Field ");

        try {
            new FTest().run();
        } catch (Throwable var6) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.5: Loader ");

        try {
            new LRun().run();
        } catch (Throwable var5) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.6: ReTrace ");

        try {
            new Tracer().run();
        } catch (Throwable var4) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.7: Annotation ");

        try {
            new annot().run();
        } catch (Throwable var3) {
            System.out.println("ERROR");
        }

        System.out.print("Test 2.8: Sec ");

        try {
            new SecTest().run();
        } catch (Throwable var2) {
            System.out.println("ERROR");
        }

        System.out.println("-------------Test #3: Efficiency-------------");
        Calc.runAll();
        System.out.println("-------------Tests r Finished-------------");
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "Aຒ\ufff9\uffc8\u001c\u001bﾍ]\n\u001cﾗﾍ\ufffe\n\fﾍຽpA\uffde\uffd9ﾍ]AﾟU\u0004gￅￄￃ\n\u001c\uffc8O逾迣￡￠￬ gﾥA,\u0004ﾍﾍﾍe໗￫\u0000V\u0004\uffc0ￂ\uffde\u001bO\uffd8\u001cAV\uffdeﾁﾍ\u001f\u000e\uffde\u001c\u0004E\uffc1\uffc1\u0006\u0000\tﾍ\u001bLAﾍￏￌ\u001c\u0006ￎ\u001c\u0004I\uffc8ￌￃ\u001cO\uffd9\u0007A\u0004ￂￏￋ\u001a\u001cￎ\u000ePK\uffdfﾍￄ\u001cOￊ\u0000K@ﾍ\uffc8ￃ\u0000\u001aￊ\u0007\nຶﾀﾀﾀBBﾀB\t\tﾀﾀﾀB;\uffc8\u001cPWﾍ\uffdfﾍ)\u0006ￃ\u0006WL\uffc8\uffc9ﾀBBﾀB\t\tﾀﾀﾀBBﾀຮkJ\uffc1ￔﾍ\f\u0000\uffc0\u001fEPￄￏￄ\u0003\u0006\uffd9\u0016\u0004Eￃ\uffc9ﾍ\n\tￋ\u0006GM\uffc8ￃￎ\u0016Oￌ\u001dA\u0004\uffd9\uffc8\uffde\u001b\n\uffc9OLA\uffdf\uffc8ﾌຒ.\uffd8\u001bLK\uffdfﾗﾍ\u0007\u001aￗ\u001fWFຉ\ufff9\uffc8\u001c\u001bﾍ]\n\u0013ﾗﾍ￬\u0001\u0001ￂ\u001bEPￄￂￃOຌ\ufff9\nWPﾍﾜﾃ\\Uﾍ;LVￂￚﾍຎ;\uffc8\u001cP\u0004ﾟﾃﾛUO\uffff\npVￌￎ\uffc8Oຏ\ufff9\nWPﾍﾟﾃ\\Uﾍ=gWￂ\uffd8\uffdf\f\nﾍພmoືﾀﾀBBﾀB\t\tﾀﾀﾀBB\ufff9\nWPﾍﾎﾟUO\uffff\nBH\uffc8ￎ\uffd9\u001cBﾀB\t\tﾀﾀﾀBBﾀB\tຑ\ufffb\uffc8\uffdf\u001c\u0006ￂ\u0001\u001e\u0004ﾜﾃﾝ\u001dີﾀB\t\tﾀﾀﾀBBﾀB\t\t\ufff9\uffc8\uffde\u001bOﾎ^\u001e\u0004\uffefￌ\uffdeﾍ\f\uffdeB\t\tﾀﾀﾀBBﾀB\t\tﾀນ￨==￢=ປ\u0010ﾚￅ\uffc8\bYﾜຌpA\uffde\uffd9ﾍ]AﾙU\u0004bￄ\uffc8\uffc1\u000bOຊ;AW\uffd9ﾍﾜA^ﾗOmJￅ\uffc8\uffdf\u0006\u001bￌ\u0001GAﾍຎ\ufff9\n\u001c\uffd9O\u0016\nﾜﾗﾍ,\u0000\uffd8\u0001P\u0e7e\uffdfﾍຌ;\n\uffde\u001b\u0004\u0015ﾃﾟﾗO,\uffdf\u0000WWﾍວ\ufff9\u0007\nﾍ;AW\uffd9ﾍﾎ]Oￄ\u001c\u0004Bￂ\uffdfﾍ<\u001f\uffdf\u0006JC\uffefￂￂ\u001bOￌ\u0001@\u0004￬ￃ\uffc9\u001d\u0000ￄ\u000b\u0004Hￄￆ\uffc8O\nￃ\u0019MVￂￃ\uffc0\n\u0001\uffd9A໕gￅￂￂ\u001c\nﾍ\u0018MW\uffc8\uffc1ￔO\u000e\uffc0\u0000JCﾍ\uffde\uffd9\u001d\nￃ\bPLﾁﾍￎ\u0000\u0002\uffdd\u000ePMￏￄ\uffc1\u0006\u001bￔC\u0004Aￋￋￄ\f\u0006\uffc8\u0001G]ﾁﾍ\uffde\u0006\u0015\uffc8C\u0004Eￃ\uffc9ﾍ\u001f\u001dￄ\fA\nຍ\ufff9\uffc8\u001c\u001bﾍ]\n\u0011ﾗﾍ￡\u0000\u000e\uffc9\nV\u0004ຏ\ufff9\uffc8\u001c\u001bﾍ^\n\u0010ﾗﾍ￬\f\f\uffd8\u001dEGￔﾍຓ;\n\uffde\u001b\u0004\u0015ﾃﾛﾗO?ￂ\u0000H\u0004ຏ\ufff9\uffc8\u001c\u001bﾍ^\n\u0011ﾗﾍ\ufffe\u001a\r￮\u0003EW\uffdeﾍ\u0e8b \rￋ\u001aWGￌ\uffd9ￂ\u001dO\ufff9\nWPﾍ�\uffdf\u0000\b\uffdf\u000eIຉ\ufff9\uffc8\uffde\u001bOﾜA\u0013\u001eﾍ￤ￃ\u0001\n\uffdf,HE\uffde\uffdeﾍັBﾀB\t\tﾀﾀﾀBBﾀB\tp\uffc8\uffde\uffd9OLﾞU\u0004aￋￋￄ\f\u0006\uffc8\u0001G]ﾀﾀﾀBBﾀB\t\tﾀﾀﾀBບ\ufff6'mj\ufff9\ufff0"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 75
        // 00c: swap
        // 00d: sipush 400
        // 010: caload
        // 011: aload 0
        // 012: dup
        // 013: sipush 400
        // 016: swap
        // 017: bipush 75
        // 019: caload
        // 01a: castore
        // 01b: castore
        // 01c: aload 0
        // 01d: dup
        // 01e: bipush 43
        // 020: swap
        // 021: sipush 305
        // 024: caload
        // 025: aload 0
        // 026: dup
        // 027: sipush 305
        // 02a: swap
        // 02b: bipush 43
        // 02d: caload
        // 02e: castore
        // 02f: castore
        // 030: aload 0
        // 031: dup
        // 032: sipush 486
        // 035: swap
        // 036: bipush 0
        // 037: caload
        // 038: aload 0
        // 039: dup
        // 03a: bipush 0
        // 03b: swap
        // 03c: sipush 486
        // 03f: caload
        // 040: castore
        // 041: castore
        // 042: aload 0
        // 043: dup
        // 044: sipush 184
        // 047: swap
        // 048: sipush 1044
        // 04b: caload
        // 04c: aload 0
        // 04d: dup
        // 04e: sipush 1044
        // 051: swap
        // 052: sipush 184
        // 055: caload
        // 056: castore
        // 057: castore
        // 058: aload 0
        // 059: dup
        // 05a: sipush 484
        // 05d: swap
        // 05e: sipush 628
        // 061: caload
        // 062: aload 0
        // 063: dup
        // 064: sipush 628
        // 067: swap
        // 068: sipush 484
        // 06b: caload
        // 06c: castore
        // 06d: castore
        // 06e: goto 14d
        // 071: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 074: bipush 0
        // 075: aaload
        // 076: astore 4
        // 078: aload 4
        // 07a: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 07d: invokevirtual java/lang/String.hashCode ()I
        // 080: ldc 65535
        // 082: iand
        // 083: istore 5
        // 085: aload 4
        // 087: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 08a: invokevirtual java/lang/String.toCharArray ()[C
        // 08d: astore 6
        // 08f: aload 0
        // 090: iload 1
        // 091: iinc 1 1
        // 094: caload
        // 095: sipush 201
        // 098: ixor
        // 099: iload 5
        // 09b: ixor
        // 09c: anewarray 167
        // 09f: astore 7
        // 0a1: bipush 0
        // 0a2: istore 8
        // 0a4: aload 0
        // 0a5: iload 1
        // 0a6: iinc 1 1
        // 0a9: caload
        // 0aa: bipush 53
        // 0ac: ixor
        // 0ad: iload 5
        // 0af: ixor
        // 0b0: istore 2
        // 0b1: iload 2
        // 0b2: newarray 5
        // 0b4: astore 9
        // 0b6: bipush 0
        // 0b7: istore 10
        // 0b9: iload 2
        // 0ba: ifle 12e
        // 0bd: aload 0
        // 0be: iload 1
        // 0bf: caload
        // 0c0: istore 11
        // 0c2: aload 6
        // 0c4: iload 1
        // 0c5: aload 6
        // 0c7: arraylength
        // 0c8: irem
        // 0c9: caload
        // 0ca: sipush 139
        // 0cd: ixor
        // 0ce: lookupswitch 74 8 165 156 198 175 224 130 226 143 229 162 232 181 234 187 251 193
        // 118: aload 9
        // 11a: iload 10
        // 11c: iload 11
        // 11e: castore
        // 11f: iinc 10 1
        // 122: iinc 1 1
        // 125: iinc 2 -1
        // 128: bipush 0
        // 129: istore 12
        // 12b: goto 199
        // 12e: aload 7
        // 130: iload 8
        // 132: iinc 8 1
        // 135: new java/lang/String
        // 138: dup
        // 139: aload 9
        // 13b: invokespecial java/lang/String.<init> ([C)V
        // 13e: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 141: aastore
        // 142: iload 1
        // 143: aload 0
        // 144: arraylength
        // 145: if_icmplt 0a4
        // 148: aload 7
        // 14a: putstatic pack/Main.d [Ljava/lang/String;
        // 14d: goto 1c4
        // 150: iload 11
        // 152: bipush -83
        // 154: ixor
        // 155: istore 11
        // 157: bipush 1
        // 158: istore 12
        // 15a: goto 199
        // 15d: iload 11
        // 15f: bipush 111
        // 161: ixor
        // 162: istore 11
        // 164: bipush 1
        // 165: istore 12
        // 167: goto 199
        // 16a: bipush 2
        // 16b: istore 12
        // 16d: goto 199
        // 170: iload 11
        // 172: bipush 36
        // 174: ixor
        // 175: istore 11
        // 177: bipush 1
        // 178: istore 12
        // 17a: goto 199
        // 17d: bipush 3
        // 17e: istore 12
        // 180: goto 199
        // 183: bipush 4
        // 184: istore 12
        // 186: goto 199
        // 189: bipush 5
        // 18a: istore 12
        // 18c: goto 199
        // 18f: bipush 6
        // 191: istore 12
        // 193: goto 199
        // 196: goto 071
        // 199: iload 12
        // 19b: tableswitch -24 0 6 -226 -131 -62 -49 -75 -24 -43
        // 1c4: return
    }
}
