package pack.tests.basics.ctrl;

public class Ctrl {
    private String ret = "FAIL";
    public int BRANCHLOCK_DOT_NET_DEMO;

    public void runt() {
        if (!"a".equals("b")) {
            throw new UnsupportedOperationException();
        }
    }

    public void runf() {
        this.runt();

        try {
            this.runt();
            this.ret = "FAIL";
        } catch (Exception var1) {
        }
    }

    public void run() {
        this.runf();
        System.out.println(this.ret);
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "aอ~ศZi\u0e7aPอ}ศxO]ﾐ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 13
        // 00c: swap
        // 00d: bipush 12
        // 00f: caload
        // 010: aload 0
        // 011: dup
        // 012: bipush 12
        // 014: swap
        // 015: bipush 13
        // 017: caload
        // 018: castore
        // 019: castore
        // 01a: aload 0
        // 01b: dup
        // 01c: bipush 6
        // 01e: swap
        // 01f: bipush 0
        // 020: caload
        // 021: aload 0
        // 022: dup
        // 023: bipush 0
        // 024: swap
        // 025: bipush 6
        // 027: caload
        // 028: castore
        // 029: castore
        // 02a: aload 0
        // 02b: dup
        // 02c: bipush 9
        // 02e: swap
        // 02f: bipush 26
        // 031: caload
        // 032: aload 0
        // 033: dup
        // 034: bipush 26
        // 036: swap
        // 037: bipush 9
        // 039: caload
        // 03a: castore
        // 03b: castore
        // 03c: aload 0
        // 03d: dup
        // 03e: bipush 0
        // 03f: swap
        // 040: bipush 11
        // 042: caload
        // 043: aload 0
        // 044: dup
        // 045: bipush 11
        // 047: swap
        // 048: bipush 0
        // 049: caload
        // 04a: castore
        // 04b: castore
        // 04c: goto 155
        // 04f: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 052: bipush 0
        // 053: aaload
        // 054: astore 4
        // 056: aload 4
        // 058: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 05b: invokevirtual java/lang/String.hashCode ()I
        // 05e: ldc 65535
        // 060: iand
        // 061: istore 5
        // 063: aload 4
        // 065: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 068: invokevirtual java/lang/String.toCharArray ()[C
        // 06b: astore 6
        // 06d: aload 0
        // 06e: iload 1
        // 06f: iinc 1 1
        // 072: caload
        // 073: sipush 215
        // 076: ixor
        // 077: iload 5
        // 079: ixor
        // 07a: anewarray 23
        // 07d: astore 7
        // 07f: bipush 0
        // 080: istore 8
        // 082: aload 0
        // 083: iload 1
        // 084: iinc 1 1
        // 087: caload
        // 088: sipush 133
        // 08b: ixor
        // 08c: iload 5
        // 08e: ixor
        // 08f: istore 2
        // 090: iload 2
        // 091: newarray 5
        // 093: astore 9
        // 095: bipush 0
        // 096: istore 10
        // 098: iload 2
        // 099: ifle 136
        // 09c: aload 0
        // 09d: iload 1
        // 09e: caload
        // 09f: istore 11
        // 0a1: aload 6
        // 0a3: iload 1
        // 0a4: aload 6
        // 0a6: arraylength
        // 0a7: irem
        // 0a8: caload
        // 0a9: sipush 143
        // 0ac: ixor
        // 0ad: lookupswitch 115 13 161 171 204 228 227 184 228 197 230 203 234 216 236 222 237 241 238 247 251 254 252 261 253 268 255 275
        // 120: aload 9
        // 122: iload 10
        // 124: iload 11
        // 126: castore
        // 127: iinc 10 1
        // 12a: iinc 1 1
        // 12d: iinc 2 -1
        // 130: bipush 0
        // 131: istore 12
        // 133: goto 1ca
        // 136: aload 7
        // 138: iload 8
        // 13a: iinc 8 1
        // 13d: new java/lang/String
        // 140: dup
        // 141: aload 9
        // 143: invokespecial java/lang/String.<init> ([C)V
        // 146: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 149: aastore
        // 14a: iload 1
        // 14b: aload 0
        // 14c: arraylength
        // 14d: if_icmplt 082
        // 150: aload 7
        // 152: putstatic pack/tests/basics/ctrl/Ctrl.d [Ljava/lang/String;
        // 155: goto 208
        // 158: iload 11
        // 15a: bipush 28
        // 15c: ixor
        // 15d: istore 11
        // 15f: bipush 1
        // 160: istore 12
        // 162: goto 1ca
        // 165: iload 11
        // 167: bipush 40
        // 169: ixor
        // 16a: istore 11
        // 16c: bipush 1
        // 16d: istore 12
        // 16f: goto 1ca
        // 172: bipush 2
        // 173: istore 12
        // 175: goto 1ca
        // 178: iload 11
        // 17a: bipush -61
        // 17c: ixor
        // 17d: istore 11
        // 17f: bipush 1
        // 180: istore 12
        // 182: goto 1ca
        // 185: bipush 3
        // 186: istore 12
        // 188: goto 1ca
        // 18b: bipush 4
        // 18c: istore 12
        // 18e: goto 1ca
        // 191: iload 11
        // 193: bipush 104
        // 195: ixor
        // 196: istore 11
        // 198: bipush 1
        // 199: istore 12
        // 19b: goto 1ca
        // 19e: bipush 5
        // 19f: istore 12
        // 1a1: goto 1ca
        // 1a4: bipush 6
        // 1a6: istore 12
        // 1a8: goto 1ca
        // 1ab: bipush 7
        // 1ad: istore 12
        // 1af: goto 1ca
        // 1b2: bipush 8
        // 1b4: istore 12
        // 1b6: goto 1ca
        // 1b9: bipush 9
        // 1bb: istore 12
        // 1bd: goto 1ca
        // 1c0: bipush 10
        // 1c2: istore 12
        // 1c4: goto 1ca
        // 1c7: goto 04f
        // 1ca: iload 12
        // 1cc: tableswitch -90 0 10 -308 -172 -116 -103 -90 -71 -65 -46 -40 -59 -33
        // 208: return
    }
}
