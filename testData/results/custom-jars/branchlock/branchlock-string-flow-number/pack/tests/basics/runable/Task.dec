package pack.tests.basics.runable;

import java.util.concurrent.RejectedExecutionException;

public class Task {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public void run() {
        Exec var1 = new Exec(2);
        Exec var2 = new Exec(3);
        Exec var3 = new Exec(100);

        try {
            Pool.tpe.submit(var2::doAdd);

            try {
                Thread.sleep(50L);
            } catch (InterruptedException var5) {
            }

            Pool.tpe.submit(Task::lambda$run$0);

            try {
                Thread.sleep(50L);
            } catch (InterruptedException var4) {
            }

            Pool.tpe.submit(var3::doAdd);
        } catch (RejectedExecutionException var6) {
            Exec.i += 10;
        }

        Thread.sleep(300L);
        if (Exec.i == 30) {
            System.out.println("PASS");
        } else {
            System.out.println("FAIL");
        }
    }

    private static void lambda$run$0(Exec var0) {
        int var1 = Exec.i;
        var0.doAdd();
        Exec.i += var1;
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾵฎﾺﾲHﾠฎ\u0e6aZﾣ\uffbf"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 4
        // 00b: swap
        // 00c: bipush 5
        // 00d: caload
        // 00e: aload 0
        // 00f: dup
        // 010: bipush 5
        // 011: swap
        // 012: bipush 4
        // 013: caload
        // 014: castore
        // 015: castore
        // 016: aload 0
        // 017: dup
        // 018: bipush 9
        // 01a: swap
        // 01b: bipush 2
        // 01c: caload
        // 01d: aload 0
        // 01e: dup
        // 01f: bipush 2
        // 020: swap
        // 021: bipush 9
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 7
        // 02a: swap
        // 02b: bipush 0
        // 02c: caload
        // 02d: aload 0
        // 02e: dup
        // 02f: bipush 0
        // 030: swap
        // 031: bipush 7
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 7
        // 03a: swap
        // 03b: bipush 16
        // 03d: caload
        // 03e: aload 0
        // 03f: dup
        // 040: bipush 16
        // 042: swap
        // 043: bipush 7
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: goto 161
        // 04b: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 04e: bipush 0
        // 04f: aaload
        // 050: astore 4
        // 052: aload 4
        // 054: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 057: invokevirtual java/lang/String.hashCode ()I
        // 05a: ldc 65535
        // 05c: iand
        // 05d: istore 5
        // 05f: aload 4
        // 061: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 064: invokevirtual java/lang/String.toCharArray ()[C
        // 067: astore 6
        // 069: aload 0
        // 06a: iload 1
        // 06b: iinc 1 1
        // 06e: caload
        // 06f: sipush 193
        // 072: ixor
        // 073: iload 5
        // 075: ixor
        // 076: anewarray 96
        // 079: astore 7
        // 07b: bipush 0
        // 07c: istore 8
        // 07e: aload 0
        // 07f: iload 1
        // 080: iinc 1 1
        // 083: caload
        // 084: sipush 163
        // 087: ixor
        // 088: iload 5
        // 08a: ixor
        // 08b: istore 2
        // 08c: iload 2
        // 08d: newarray 5
        // 08f: astore 9
        // 091: bipush 0
        // 092: istore 10
        // 094: iload 2
        // 095: ifle 142
        // 098: aload 0
        // 099: iload 1
        // 09a: caload
        // 09b: istore 11
        // 09d: aload 6
        // 09f: iload 1
        // 0a0: aload 6
        // 0a2: arraylength
        // 0a3: irem
        // 0a4: caload
        // 0a5: bipush 17
        // 0a7: ixor
        // 0a8: lookupswitch 132 15 63 299 69 239 97 188 98 201 99 207 100 220 101 226 112 245 114 251 115 258 116 265 120 278 122 285 125 292 127 306
        // 12c: aload 9
        // 12e: iload 10
        // 130: iload 11
        // 132: castore
        // 133: iinc 10 1
        // 136: iinc 1 1
        // 139: iinc 2 -1
        // 13c: bipush 0
        // 13d: istore 12
        // 13f: goto 1e4
        // 142: aload 7
        // 144: iload 8
        // 146: iinc 8 1
        // 149: new java/lang/String
        // 14c: dup
        // 14d: aload 9
        // 14f: invokespecial java/lang/String.<init> ([C)V
        // 152: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 155: aastore
        // 156: iload 1
        // 157: aload 0
        // 158: arraylength
        // 159: if_icmplt 07e
        // 15c: aload 7
        // 15e: putstatic pack/tests/basics/runable/Task.d [Ljava/lang/String;
        // 161: goto 228
        // 164: iload 11
        // 166: bipush -13
        // 168: ixor
        // 169: istore 11
        // 16b: bipush 1
        // 16c: istore 12
        // 16e: goto 1e4
        // 171: bipush 2
        // 172: istore 12
        // 174: goto 1e4
        // 177: iload 11
        // 179: bipush 73
        // 17b: ixor
        // 17c: istore 11
        // 17e: bipush 1
        // 17f: istore 12
        // 181: goto 1e4
        // 184: bipush 3
        // 185: istore 12
        // 187: goto 1e4
        // 18a: iload 11
        // 18c: bipush 27
        // 18e: ixor
        // 18f: istore 11
        // 191: bipush 1
        // 192: istore 12
        // 194: goto 1e4
        // 197: bipush 4
        // 198: istore 12
        // 19a: goto 1e4
        // 19d: bipush 5
        // 19e: istore 12
        // 1a0: goto 1e4
        // 1a3: bipush 6
        // 1a5: istore 12
        // 1a7: goto 1e4
        // 1aa: bipush 7
        // 1ac: istore 12
        // 1ae: goto 1e4
        // 1b1: iload 11
        // 1b3: bipush -33
        // 1b5: ixor
        // 1b6: istore 11
        // 1b8: bipush 1
        // 1b9: istore 12
        // 1bb: goto 1e4
        // 1be: bipush 8
        // 1c0: istore 12
        // 1c2: goto 1e4
        // 1c5: bipush 9
        // 1c7: istore 12
        // 1c9: goto 1e4
        // 1cc: bipush 10
        // 1ce: istore 12
        // 1d0: goto 1e4
        // 1d3: bipush 11
        // 1d5: istore 12
        // 1d7: goto 1e4
        // 1da: bipush 12
        // 1dc: istore 12
        // 1de: goto 1e4
        // 1e1: goto 04b
        // 1e4: iload 12
        // 1e6: tableswitch -26 0 12 -338 -186 -130 -111 -117 -98 -79 -92 -53 -67 -33 -26 -19
        // 228: return
    }
}
