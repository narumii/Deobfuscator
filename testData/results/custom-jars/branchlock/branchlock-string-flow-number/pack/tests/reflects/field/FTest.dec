package pack.tests.reflects.field;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class FTest {
    public String BRANCHLOCK_DOT_NET_DEMO;

    public void run() {
        Constructor var1 = FObject.class.getDeclaredConstructor(int.class);
        if (var1.isAccessible()) {
            System.out.println("FAIL");
        } else {
            var1.setAccessible(true);
            FObject var2 = (FObject)var1.newInstance(1);
            Method var3 = FObject.class.getDeclaredMethod("add", null);
            if (var3.isAccessible()) {
                System.out.println("FAIL");
            } else {
                var3.setAccessible(true);
                var3.invoke(var2);
                Field var4 = FObject.class.getDeclaredField("i");
                if (var4.isAccessible()) {
                    System.out.println("FAIL");
                } else {
                    var4.setAccessible(true);
                    if (var4.getInt(var2) != 4) {
                        System.out.println("FAIL");
                    } else {
                        System.out.println("PASS");
                    }
                }
            }
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "\u0e79\u0e7eﾻ@@\u0e79ﾊeww๕J3mﾛ\u0e7cﾳ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 4
        // 00b: swap
        // 00c: bipush 3
        // 00d: caload
        // 00e: aload 0
        // 00f: dup
        // 010: bipush 3
        // 011: swap
        // 012: bipush 4
        // 013: caload
        // 014: castore
        // 015: castore
        // 016: aload 0
        // 017: dup
        // 018: bipush 12
        // 01a: swap
        // 01b: bipush 14
        // 01d: caload
        // 01e: aload 0
        // 01f: dup
        // 020: bipush 14
        // 022: swap
        // 023: bipush 12
        // 025: caload
        // 026: castore
        // 027: castore
        // 028: aload 0
        // 029: dup
        // 02a: bipush 10
        // 02c: swap
        // 02d: bipush 0
        // 02e: caload
        // 02f: aload 0
        // 030: dup
        // 031: bipush 0
        // 032: swap
        // 033: bipush 10
        // 035: caload
        // 036: castore
        // 037: castore
        // 038: aload 0
        // 039: dup
        // 03a: bipush 5
        // 03b: swap
        // 03c: bipush 18
        // 03e: caload
        // 03f: aload 0
        // 040: dup
        // 041: bipush 18
        // 043: swap
        // 044: bipush 5
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: goto 161
        // 04b: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 04e: bipush 0
        // 04f: aaload
        // 050: astore 4
        // 052: aload 4
        // 054: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 057: invokevirtual java/lang/String.hashCode ()I
        // 05a: ldc 65535
        // 05c: iand
        // 05d: istore 5
        // 05f: aload 4
        // 061: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 064: invokevirtual java/lang/String.toCharArray ()[C
        // 067: astore 6
        // 069: aload 0
        // 06a: iload 1
        // 06b: iinc 1 1
        // 06e: caload
        // 06f: sipush 248
        // 072: ixor
        // 073: iload 5
        // 075: ixor
        // 076: anewarray 92
        // 079: astore 7
        // 07b: bipush 0
        // 07c: istore 8
        // 07e: aload 0
        // 07f: iload 1
        // 080: iinc 1 1
        // 083: caload
        // 084: sipush 212
        // 087: ixor
        // 088: iload 5
        // 08a: ixor
        // 08b: istore 2
        // 08c: iload 2
        // 08d: newarray 5
        // 08f: astore 9
        // 091: bipush 0
        // 092: istore 10
        // 094: iload 2
        // 095: ifle 142
        // 098: aload 0
        // 099: iload 1
        // 09a: caload
        // 09b: istore 11
        // 09d: aload 6
        // 09f: iload 1
        // 0a0: aload 6
        // 0a2: arraylength
        // 0a3: irem
        // 0a4: caload
        // 0a5: bipush 89
        // 0a7: ixor
        // 0a8: lookupswitch 132 15 13 233 31 306 41 188 42 201 43 214 45 227 48 239 50 245 53 251 56 265 58 272 60 285 61 292 63 299 119 258
        // 12c: aload 9
        // 12e: iload 10
        // 130: iload 11
        // 132: castore
        // 133: iinc 10 1
        // 136: iinc 1 1
        // 139: iinc 2 -1
        // 13c: bipush 0
        // 13d: istore 12
        // 13f: goto 1e4
        // 142: aload 7
        // 144: iload 8
        // 146: iinc 8 1
        // 149: new java/lang/String
        // 14c: dup
        // 14d: aload 9
        // 14f: invokespecial java/lang/String.<init> ([C)V
        // 152: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 155: aastore
        // 156: iload 1
        // 157: aload 0
        // 158: arraylength
        // 159: if_icmplt 07e
        // 15c: aload 7
        // 15e: putstatic pack/tests/reflects/field/FTest.d [Ljava/lang/String;
        // 161: goto 228
        // 164: iload 11
        // 166: bipush 127
        // 168: ixor
        // 169: istore 11
        // 16b: bipush 1
        // 16c: istore 12
        // 16e: goto 1e4
        // 171: iload 11
        // 173: bipush 36
        // 175: ixor
        // 176: istore 11
        // 178: bipush 1
        // 179: istore 12
        // 17b: goto 1e4
        // 17e: iload 11
        // 180: bipush 12
        // 182: ixor
        // 183: istore 11
        // 185: bipush 1
        // 186: istore 12
        // 188: goto 1e4
        // 18b: bipush 2
        // 18c: istore 12
        // 18e: goto 1e4
        // 191: bipush 3
        // 192: istore 12
        // 194: goto 1e4
        // 197: bipush 4
        // 198: istore 12
        // 19a: goto 1e4
        // 19d: bipush 5
        // 19e: istore 12
        // 1a0: goto 1e4
        // 1a3: bipush 6
        // 1a5: istore 12
        // 1a7: goto 1e4
        // 1aa: bipush 7
        // 1ac: istore 12
        // 1ae: goto 1e4
        // 1b1: bipush 8
        // 1b3: istore 12
        // 1b5: goto 1e4
        // 1b8: iload 11
        // 1ba: bipush -38
        // 1bc: ixor
        // 1bd: istore 11
        // 1bf: bipush 1
        // 1c0: istore 12
        // 1c2: goto 1e4
        // 1c5: bipush 9
        // 1c7: istore 12
        // 1c9: goto 1e4
        // 1cc: bipush 10
        // 1ce: istore 12
        // 1d0: goto 1e4
        // 1d3: bipush 11
        // 1d5: istore 12
        // 1d7: goto 1e4
        // 1da: bipush 12
        // 1dc: istore 12
        // 1de: goto 1e4
        // 1e1: goto 04b
        // 1e4: iload 12
        // 1e6: tableswitch -338 0 12 -338 -186 -117 -104 -130 -91 -79 -73 -67 -46 -33 -60 -53
        // 228: return
    }
}
