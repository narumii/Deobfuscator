package pack.tests.reflects.loader;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class Loader extends ClassLoader {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public static byte[] readAllBytes(InputStream var0) {
        ByteArrayOutputStream var1 = new ByteArrayOutputStream();
        byte[] var2 = new byte[1024];

        int var3;
        while ((var3 = var0.read(var2)) != -1) {
            var1.write(var2, 0, var3);
        }

        return var1.toByteArray();
    }

    @Override
    public InputStream getResourceAsStream(String var1) {
        return (InputStream)(var1.contains("TEST") ? new ByteArrayInputStream("PASS".getBytes()) : super.getResourceAsStream(var1));
    }

    @Override
    public Class findClass(String var1) {
        byte[] var2 = readAllBytes(Loader.class.getClassLoader().getResourceAsStream("pack/tests/reflects/loader/LTest.class"));
        return this.defineClass(var1, var2, 0, var2.length);
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ￗￗO^ู\uffc9ฑKￜHฑ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 10
        // 00c: swap
        // 00d: bipush 4
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 4
        // 012: swap
        // 013: bipush 10
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 4
        // 01b: swap
        // 01c: bipush 1
        // 01d: caload
        // 01e: aload 0
        // 01f: dup
        // 020: bipush 1
        // 021: swap
        // 022: bipush 4
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 10
        // 02a: swap
        // 02b: bipush 0
        // 02c: caload
        // 02d: aload 0
        // 02e: dup
        // 02f: bipush 0
        // 030: swap
        // 031: bipush 10
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 3
        // 039: swap
        // 03a: bipush 13
        // 03c: caload
        // 03d: aload 0
        // 03e: dup
        // 03f: bipush 13
        // 041: swap
        // 042: bipush 3
        // 043: caload
        // 044: castore
        // 045: castore
        // 046: aload 0
        // 047: dup
        // 048: bipush 1
        // 049: swap
        // 04a: bipush 8
        // 04c: caload
        // 04d: aload 0
        // 04e: dup
        // 04f: bipush 8
        // 051: swap
        // 052: bipush 1
        // 053: caload
        // 054: castore
        // 055: castore
        // 056: goto 165
        // 059: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 05c: bipush 0
        // 05d: aaload
        // 05e: astore 4
        // 060: aload 4
        // 062: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 065: invokevirtual java/lang/String.hashCode ()I
        // 068: ldc 65535
        // 06a: iand
        // 06b: istore 5
        // 06d: aload 4
        // 06f: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 072: invokevirtual java/lang/String.toCharArray ()[C
        // 075: astore 6
        // 077: aload 0
        // 078: iload 1
        // 079: iinc 1 1
        // 07c: caload
        // 07d: sipush 146
        // 080: ixor
        // 081: iload 5
        // 083: ixor
        // 084: anewarray 37
        // 087: astore 7
        // 089: bipush 0
        // 08a: istore 8
        // 08c: aload 0
        // 08d: iload 1
        // 08e: iinc 1 1
        // 091: caload
        // 092: sipush 188
        // 095: ixor
        // 096: iload 5
        // 098: ixor
        // 099: istore 2
        // 09a: iload 2
        // 09b: newarray 5
        // 09d: astore 9
        // 09f: bipush 0
        // 0a0: istore 10
        // 0a2: iload 2
        // 0a3: ifle 146
        // 0a6: aload 0
        // 0a7: iload 1
        // 0a8: caload
        // 0a9: istore 11
        // 0ab: aload 6
        // 0ad: iload 1
        // 0ae: aload 6
        // 0b0: arraylength
        // 0b1: irem
        // 0b2: caload
        // 0b3: sipush 222
        // 0b6: ixor
        // 0b7: lookupswitch 121 14 146 247 170 177 172 190 173 203 174 216 177 235 178 241 181 253 184 260 186 267 187 274 189 281 191 288 240 229
        // 130: aload 9
        // 132: iload 10
        // 134: iload 11
        // 136: castore
        // 137: iinc 10 1
        // 13a: iinc 1 1
        // 13d: iinc 2 -1
        // 140: bipush 0
        // 141: istore 12
        // 143: goto 1e1
        // 146: aload 7
        // 148: iload 8
        // 14a: iinc 8 1
        // 14d: new java/lang/String
        // 150: dup
        // 151: aload 9
        // 153: invokespecial java/lang/String.<init> ([C)V
        // 156: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 159: aastore
        // 15a: iload 1
        // 15b: aload 0
        // 15c: arraylength
        // 15d: if_icmplt 08c
        // 160: aload 7
        // 162: putstatic pack/tests/reflects/loader/Loader.d [Ljava/lang/String;
        // 165: goto 220
        // 168: iload 11
        // 16a: bipush -99
        // 16c: ixor
        // 16d: istore 11
        // 16f: bipush 1
        // 170: istore 12
        // 172: goto 1e1
        // 175: iload 11
        // 177: bipush -124
        // 179: ixor
        // 17a: istore 11
        // 17c: bipush 1
        // 17d: istore 12
        // 17f: goto 1e1
        // 182: iload 11
        // 184: bipush 27
        // 186: ixor
        // 187: istore 11
        // 189: bipush 1
        // 18a: istore 12
        // 18c: goto 1e1
        // 18f: iload 11
        // 191: bipush -65
        // 193: ixor
        // 194: istore 11
        // 196: bipush 1
        // 197: istore 12
        // 199: goto 1e1
        // 19c: bipush 2
        // 19d: istore 12
        // 19f: goto 1e1
        // 1a2: bipush 3
        // 1a3: istore 12
        // 1a5: goto 1e1
        // 1a8: bipush 4
        // 1a9: istore 12
        // 1ab: goto 1e1
        // 1ae: bipush 5
        // 1af: istore 12
        // 1b1: goto 1e1
        // 1b4: bipush 6
        // 1b6: istore 12
        // 1b8: goto 1e1
        // 1bb: bipush 7
        // 1bd: istore 12
        // 1bf: goto 1e1
        // 1c2: bipush 8
        // 1c4: istore 12
        // 1c6: goto 1e1
        // 1c9: bipush 9
        // 1cb: istore 12
        // 1cd: goto 1e1
        // 1d0: bipush 10
        // 1d2: istore 12
        // 1d4: goto 1e1
        // 1d7: bipush 11
        // 1d9: istore 12
        // 1db: goto 1e1
        // 1de: goto 059
        // 1e1: iload 12
        // 1e3: tableswitch -179 0 11 -321 -179 -110 -123 -65 -97 -53 -59 -40 -47 -26 -33
        // 220: return
    }
}
