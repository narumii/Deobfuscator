package pack.tests.reflects.res;

public class Accesor {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public void run() {
        Accesor.class.getResourceAsStream("/pack/tests/reflects/res/file").read();
        byte var10001 = 97;
        throw new RuntimeException();
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "\t.V\u001cV￪\t\t￤\u000e\ufff5\u000e\t\ufff3￠@J￤\u001e\ufff5\u000e\t\u000f￤\ufff2ฤ@O\u0011￤NົR￢\u001c￢￪\t\t￤\u000e\ufff5\u000e\t\ufff3￠@J￤\u001e\ufff5\u000e\t\u000f￤\ufff2\t@O\u0011￤ຢￕ<uົຢￇg4ￍຣ\uffe7\u0014J￤ﾷ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 4
        // 00b: swap
        // 00c: bipush 33
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 33
        // 013: swap
        // 014: bipush 4
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 1
        // 01b: swap
        // 01c: bipush 65
        // 01e: caload
        // 01f: aload 0
        // 020: dup
        // 021: bipush 65
        // 023: swap
        // 024: bipush 1
        // 025: caload
        // 026: castore
        // 027: castore
        // 028: aload 0
        // 029: dup
        // 02a: bipush 25
        // 02c: swap
        // 02d: bipush 0
        // 02e: caload
        // 02f: aload 0
        // 030: dup
        // 031: bipush 0
        // 032: swap
        // 033: bipush 25
        // 035: caload
        // 036: castore
        // 037: castore
        // 038: aload 0
        // 039: dup
        // 03a: bipush 27
        // 03c: swap
        // 03d: sipush 146
        // 040: caload
        // 041: aload 0
        // 042: dup
        // 043: sipush 146
        // 046: swap
        // 047: bipush 27
        // 049: caload
        // 04a: castore
        // 04b: castore
        // 04c: aload 0
        // 04d: dup
        // 04e: bipush 25
        // 050: swap
        // 051: bipush 8
        // 053: caload
        // 054: aload 0
        // 055: dup
        // 056: bipush 8
        // 058: swap
        // 059: bipush 25
        // 05b: caload
        // 05c: castore
        // 05d: castore
        // 05e: goto 165
        // 061: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 064: bipush 0
        // 065: aaload
        // 066: astore 4
        // 068: aload 4
        // 06a: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 06d: invokevirtual java/lang/String.hashCode ()I
        // 070: ldc 65535
        // 072: iand
        // 073: istore 5
        // 075: aload 4
        // 077: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 07a: invokevirtual java/lang/String.toCharArray ()[C
        // 07d: astore 6
        // 07f: aload 0
        // 080: iload 1
        // 081: iinc 1 1
        // 084: caload
        // 085: sipush 136
        // 088: ixor
        // 089: iload 5
        // 08b: ixor
        // 08c: anewarray 33
        // 08f: astore 7
        // 091: bipush 0
        // 092: istore 8
        // 094: aload 0
        // 095: iload 1
        // 096: iinc 1 1
        // 099: caload
        // 09a: bipush 15
        // 09c: ixor
        // 09d: iload 5
        // 09f: ixor
        // 0a0: istore 2
        // 0a1: iload 2
        // 0a2: newarray 5
        // 0a4: astore 9
        // 0a6: bipush 0
        // 0a7: istore 10
        // 0a9: iload 2
        // 0aa: ifle 146
        // 0ad: aload 0
        // 0ae: iload 1
        // 0af: caload
        // 0b0: istore 11
        // 0b2: aload 6
        // 0b4: iload 1
        // 0b5: aload 6
        // 0b7: arraylength
        // 0b8: irem
        // 0b9: caload
        // 0ba: sipush 135
        // 0bd: ixor
        // 0be: lookupswitch 114 13 169 227 198 215 225 170 226 183 228 196 230 202 232 221 235 233 236 246 243 253 244 260 245 267 247 274
        // 130: aload 9
        // 132: iload 10
        // 134: iload 11
        // 136: castore
        // 137: iinc 10 1
        // 13a: iinc 1 1
        // 13d: iinc 2 -1
        // 140: bipush 0
        // 141: istore 12
        // 143: goto 1da
        // 146: aload 7
        // 148: iload 8
        // 14a: iinc 8 1
        // 14d: new java/lang/String
        // 150: dup
        // 151: aload 9
        // 153: invokespecial java/lang/String.<init> ([C)V
        // 156: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 159: aastore
        // 15a: iload 1
        // 15b: aload 0
        // 15c: arraylength
        // 15d: if_icmplt 094
        // 160: aload 7
        // 162: putstatic pack/tests/reflects/res/Accesor.d [Ljava/lang/String;
        // 165: goto 218
        // 168: iload 11
        // 16a: bipush -127
        // 16c: ixor
        // 16d: istore 11
        // 16f: bipush 1
        // 170: istore 12
        // 172: goto 1da
        // 175: iload 11
        // 177: bipush 38
        // 179: ixor
        // 17a: istore 11
        // 17c: bipush 1
        // 17d: istore 12
        // 17f: goto 1da
        // 182: bipush 2
        // 183: istore 12
        // 185: goto 1da
        // 188: iload 11
        // 18a: bipush 125
        // 18c: ixor
        // 18d: istore 11
        // 18f: bipush 1
        // 190: istore 12
        // 192: goto 1da
        // 195: bipush 3
        // 196: istore 12
        // 198: goto 1da
        // 19b: bipush 4
        // 19c: istore 12
        // 19e: goto 1da
        // 1a1: bipush 5
        // 1a2: istore 12
        // 1a4: goto 1da
        // 1a7: iload 11
        // 1a9: bipush -123
        // 1ab: ixor
        // 1ac: istore 11
        // 1ae: bipush 1
        // 1af: istore 12
        // 1b1: goto 1da
        // 1b4: bipush 6
        // 1b6: istore 12
        // 1b8: goto 1da
        // 1bb: bipush 7
        // 1bd: istore 12
        // 1bf: goto 1da
        // 1c2: bipush 8
        // 1c4: istore 12
        // 1c6: goto 1da
        // 1c9: bipush 9
        // 1cb: istore 12
        // 1cd: goto 1da
        // 1d0: bipush 10
        // 1d2: istore 12
        // 1d4: goto 1da
        // 1d7: goto 061
        // 1da: iload 12
        // 1dc: tableswitch -116 0 10 -307 -172 -103 -116 -71 -65 -84 -59 -40 -26 -53
        // 218: return
    }
}
