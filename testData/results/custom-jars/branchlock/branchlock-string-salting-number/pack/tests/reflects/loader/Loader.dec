package pack.tests.reflects.loader;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class Loader extends ClassLoader {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public Loader(int var1) {
    }

    public static byte[] readAllBytes(InputStream var0, int var1) {
        try {
            ByteArrayOutputStream var2 = new ByteArrayOutputStream();
            byte[] var3 = new byte[1024];

            int var4;
            while ((var4 = var0.read(var3)) != -1) {
                var2.write(var3, 0, var4);
            }

            return var2.toByteArray();
        } catch (Exception var5) {
            return null;
        }
    }

    @Override
    public InputStream getResourceAsStream(String var1) {
        return (InputStream)(var1.contains("TEST") ? new ByteArrayInputStream("PASS".getBytes()) : super.getResourceAsStream(var1));
    }

    @Override
    public Class findClass(String var1) {
        byte[] var2 = readAllBytes(Loader.class.getClassLoader().getResourceAsStream("pack/tests/reflects/loader/LTest.class"), 31470);
        return this.defineClass(var1, var2, 0, var2.length);
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "K๕K,ￗ๖๕9^:ￗ\u0e002ﾧ\u0006){q\u001e"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 14
        // 00c: swap
        // 00d: bipush 13
        // 00f: caload
        // 010: aload 0
        // 011: dup
        // 012: bipush 13
        // 014: swap
        // 015: bipush 14
        // 017: caload
        // 018: castore
        // 019: castore
        // 01a: aload 0
        // 01b: dup
        // 01c: bipush 5
        // 01d: swap
        // 01e: bipush 0
        // 01f: caload
        // 020: aload 0
        // 021: dup
        // 022: bipush 0
        // 023: swap
        // 024: bipush 5
        // 025: caload
        // 026: castore
        // 027: castore
        // 028: aload 0
        // 029: dup
        // 02a: bipush 11
        // 02c: swap
        // 02d: bipush 0
        // 02e: caload
        // 02f: aload 0
        // 030: dup
        // 031: bipush 0
        // 032: swap
        // 033: bipush 11
        // 035: caload
        // 036: castore
        // 037: castore
        // 038: aload 0
        // 039: dup
        // 03a: bipush 6
        // 03c: swap
        // 03d: bipush 22
        // 03f: caload
        // 040: aload 0
        // 041: dup
        // 042: bipush 22
        // 044: swap
        // 045: bipush 6
        // 047: caload
        // 048: castore
        // 049: castore
        // 04a: aload 0
        // 04b: dup
        // 04c: bipush 11
        // 04e: swap
        // 04f: bipush 2
        // 050: caload
        // 051: aload 0
        // 052: dup
        // 053: bipush 2
        // 054: swap
        // 055: bipush 11
        // 057: caload
        // 058: castore
        // 059: castore
        // 05a: goto 169
        // 05d: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 060: bipush 0
        // 061: aaload
        // 062: astore 4
        // 064: aload 4
        // 066: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 069: invokevirtual java/lang/String.hashCode ()I
        // 06c: ldc 65535
        // 06e: iand
        // 06f: istore 5
        // 071: aload 4
        // 073: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 076: invokevirtual java/lang/String.toCharArray ()[C
        // 079: astore 6
        // 07b: aload 0
        // 07c: iload 1
        // 07d: iinc 1 1
        // 080: caload
        // 081: sipush 170
        // 084: ixor
        // 085: iload 5
        // 087: ixor
        // 088: anewarray 40
        // 08b: astore 7
        // 08d: bipush 0
        // 08e: istore 8
        // 090: aload 0
        // 091: iload 1
        // 092: iinc 1 1
        // 095: caload
        // 096: sipush 248
        // 099: ixor
        // 09a: iload 5
        // 09c: ixor
        // 09d: istore 2
        // 09e: iload 2
        // 09f: newarray 5
        // 0a1: astore 9
        // 0a3: bipush 0
        // 0a4: istore 10
        // 0a6: iload 2
        // 0a7: ifle 14a
        // 0aa: aload 0
        // 0ab: iload 1
        // 0ac: caload
        // 0ad: istore 11
        // 0af: aload 6
        // 0b1: iload 1
        // 0b2: aload 6
        // 0b4: arraylength
        // 0b5: irem
        // 0b6: caload
        // 0b7: sipush 150
        // 0ba: ixor
        // 0bb: lookupswitch 121 14 184 254 218 281 226 177 228 190 229 203 230 216 240 222 242 228 243 234 245 240 247 247 249 267 250 274 253 288
        // 134: aload 9
        // 136: iload 10
        // 138: iload 11
        // 13a: castore
        // 13b: iinc 10 1
        // 13e: iinc 1 1
        // 141: iinc 2 -1
        // 144: bipush 0
        // 145: istore 12
        // 147: goto 1e5
        // 14a: aload 7
        // 14c: iload 8
        // 14e: iinc 8 1
        // 151: new java/lang/String
        // 154: dup
        // 155: aload 9
        // 157: invokespecial java/lang/String.<init> ([C)V
        // 15a: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 15d: aastore
        // 15e: iload 1
        // 15f: aload 0
        // 160: arraylength
        // 161: if_icmplt 090
        // 164: aload 7
        // 166: putstatic pack/tests/reflects/loader/Loader.d [Ljava/lang/String;
        // 169: goto 224
        // 16c: iload 11
        // 16e: bipush 31
        // 170: ixor
        // 171: istore 11
        // 173: bipush 1
        // 174: istore 12
        // 176: goto 1e5
        // 179: iload 11
        // 17b: bipush -61
        // 17d: ixor
        // 17e: istore 11
        // 180: bipush 1
        // 181: istore 12
        // 183: goto 1e5
        // 186: iload 11
        // 188: bipush 105
        // 18a: ixor
        // 18b: istore 11
        // 18d: bipush 1
        // 18e: istore 12
        // 190: goto 1e5
        // 193: bipush 2
        // 194: istore 12
        // 196: goto 1e5
        // 199: bipush 3
        // 19a: istore 12
        // 19c: goto 1e5
        // 19f: bipush 4
        // 1a0: istore 12
        // 1a2: goto 1e5
        // 1a5: bipush 5
        // 1a6: istore 12
        // 1a8: goto 1e5
        // 1ab: bipush 6
        // 1ad: istore 12
        // 1af: goto 1e5
        // 1b2: bipush 7
        // 1b4: istore 12
        // 1b6: goto 1e5
        // 1b9: iload 11
        // 1bb: bipush -124
        // 1bd: ixor
        // 1be: istore 11
        // 1c0: bipush 1
        // 1c1: istore 12
        // 1c3: goto 1e5
        // 1c6: bipush 8
        // 1c8: istore 12
        // 1ca: goto 1e5
        // 1cd: bipush 9
        // 1cf: istore 12
        // 1d1: goto 1e5
        // 1d4: bipush 10
        // 1d6: istore 12
        // 1d8: goto 1e5
        // 1db: bipush 11
        // 1dd: istore 12
        // 1df: goto 1e5
        // 1e2: goto 05d
        // 1e5: iload 12
        // 1e7: tableswitch -97 0 11 -321 -179 -123 -97 -78 -84 -66 -72 -60 -110 -46 -53
        // 224: return
    }
}
