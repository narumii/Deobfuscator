package pack.tests.reflects.loader;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class Loader extends ClassLoader {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public Loader(int var1) {
    }

    public static byte[] readAllBytes(InputStream var0, int var1) {
        try {
            ByteArrayOutputStream var2 = new ByteArrayOutputStream();
            byte[] var3 = new byte[1024];

            int var4;
            while ((var4 = var0.read(var3)) != -1) {
                var2.write(var3, 0, var4);
            }

            return var2.toByteArray();
        } catch (Exception var5) {
            return null;
        }
    }

    @Override
    public InputStream getResourceAsStream(String var1) {
        return (InputStream)(var1.contains("TEST") ? new ByteArrayInputStream("PASS".getBytes()) : super.getResourceAsStream(var1));
    }

    @Override
    public Class findClass(String var1) {
        byte[] var2 = readAllBytes(Loader.class.getClassLoader().getResourceAsStream("pack/tests/reflects/loader/LTest.class"), 31470);
        return this.defineClass(var1, var2, 0, var2.length);
    }
}
