package pack.tests.security;

import java.lang.reflect.Method;

public class SecTest {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public SecTest(int var1) {
    }

    public void run(int var1) {
        System.setSecurityManager(new Sman(31850));
        System.out.print("FAIL");

        try {
            Method var2 = SecExec.class.getDeclaredMethod("doShutdown");
            var2.setAccessible(true);
            var2.invoke(null);
        } catch (Throwable var6) {
            Throwable var4 = var6;

            while (true) {
                Throwable var3 = var4.getCause();
                if (var3 == null) {
                    String var5 = var4.getMessage();
                    if (var5 == null) {
                        return;
                    }

                    if (var5.contains("HOOK")) {
                        System.out.println("\b\b\b\bPASS");
                    }
                    break;
                }

                var4 = var3;
            }
        }
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾶﾅﾲﾹ\u0ef7ﾚﾌﾍﾲﾖﾡﾗ\u0ef5\uffde\ufff1ﾞ\ufff1ﾆﾸﾅﾪ\u0ef9ﾞ\fຎﾲ\u0ef9\uffd0ﾗﾟﾾ"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 5
        // 00b: swap
        // 00c: bipush 30
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 30
        // 013: swap
        // 014: bipush 5
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 4
        // 01b: swap
        // 01c: bipush 1
        // 01d: caload
        // 01e: aload 0
        // 01f: dup
        // 020: bipush 1
        // 021: swap
        // 022: bipush 4
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 24
        // 02a: swap
        // 02b: bipush 0
        // 02c: caload
        // 02d: aload 0
        // 02e: dup
        // 02f: bipush 0
        // 030: swap
        // 031: bipush 24
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 27
        // 03a: swap
        // 03b: bipush 33
        // 03d: caload
        // 03e: aload 0
        // 03f: dup
        // 040: bipush 33
        // 042: swap
        // 043: bipush 27
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: aload 0
        // 049: dup
        // 04a: bipush 6
        // 04c: swap
        // 04d: bipush 0
        // 04e: caload
        // 04f: aload 0
        // 050: dup
        // 051: bipush 0
        // 052: swap
        // 053: bipush 6
        // 055: caload
        // 056: castore
        // 057: castore
        // 058: goto 165
        // 05b: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 05e: bipush 0
        // 05f: aaload
        // 060: astore 4
        // 062: aload 4
        // 064: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 067: invokevirtual java/lang/String.hashCode ()I
        // 06a: ldc 65535
        // 06c: iand
        // 06d: istore 5
        // 06f: aload 4
        // 071: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 074: invokevirtual java/lang/String.toCharArray ()[C
        // 077: astore 6
        // 079: aload 0
        // 07a: iload 1
        // 07b: iinc 1 1
        // 07e: caload
        // 07f: bipush 35
        // 081: ixor
        // 082: iload 5
        // 084: ixor
        // 085: anewarray 68
        // 088: astore 7
        // 08a: bipush 0
        // 08b: istore 8
        // 08d: aload 0
        // 08e: iload 1
        // 08f: iinc 1 1
        // 092: caload
        // 093: bipush 84
        // 095: ixor
        // 096: iload 5
        // 098: ixor
        // 099: istore 2
        // 09a: iload 2
        // 09b: newarray 5
        // 09d: astore 9
        // 09f: bipush 0
        // 0a0: istore 10
        // 0a2: iload 2
        // 0a3: ifle 146
        // 0a6: aload 0
        // 0a7: iload 1
        // 0a8: caload
        // 0a9: istore 11
        // 0ab: aload 6
        // 0ad: iload 1
        // 0ae: aload 6
        // 0b0: arraylength
        // 0b1: irem
        // 0b2: caload
        // 0b3: bipush 105
        // 0b5: ixor
        // 0b6: lookupswitch 122 14 0 178 2 191 8 210 10 216 12 222 16 228 25 235 26 248 27 262 28 269 29 276 58 255 61 283 71 204
        // 130: aload 9
        // 132: iload 10
        // 134: iload 11
        // 136: castore
        // 137: iinc 10 1
        // 13a: iinc 1 1
        // 13d: iinc 2 -1
        // 140: bipush 0
        // 141: istore 12
        // 143: goto 1e1
        // 146: aload 7
        // 148: iload 8
        // 14a: iinc 8 1
        // 14d: new java/lang/String
        // 150: dup
        // 151: aload 9
        // 153: invokespecial java/lang/String.<init> ([C)V
        // 156: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 159: aastore
        // 15a: iload 1
        // 15b: aload 0
        // 15c: arraylength
        // 15d: if_icmplt 08d
        // 160: aload 7
        // 162: putstatic pack/tests/security/SecTest.d [Ljava/lang/String;
        // 165: goto 220
        // 168: iload 11
        // 16a: bipush -7
        // 16c: ixor
        // 16d: istore 11
        // 16f: bipush 1
        // 170: istore 12
        // 172: goto 1e1
        // 175: iload 11
        // 177: bipush -42
        // 179: ixor
        // 17a: istore 11
        // 17c: bipush 1
        // 17d: istore 12
        // 17f: goto 1e1
        // 182: bipush 2
        // 183: istore 12
        // 185: goto 1e1
        // 188: bipush 3
        // 189: istore 12
        // 18b: goto 1e1
        // 18e: bipush 4
        // 18f: istore 12
        // 191: goto 1e1
        // 194: bipush 5
        // 195: istore 12
        // 197: goto 1e1
        // 19a: bipush 6
        // 19c: istore 12
        // 19e: goto 1e1
        // 1a1: iload 11
        // 1a3: bipush -106
        // 1a5: ixor
        // 1a6: istore 11
        // 1a8: bipush 1
        // 1a9: istore 12
        // 1ab: goto 1e1
        // 1ae: bipush 7
        // 1b0: istore 12
        // 1b2: goto 1e1
        // 1b5: bipush 8
        // 1b7: istore 12
        // 1b9: goto 1e1
        // 1bc: bipush 9
        // 1be: istore 12
        // 1c0: goto 1e1
        // 1c3: bipush 10
        // 1c5: istore 12
        // 1c7: goto 1e1
        // 1ca: bipush 11
        // 1cc: istore 12
        // 1ce: goto 1e1
        // 1d1: iload 11
        // 1d3: bipush 67
        // 1d5: ixor
        // 1d6: istore 11
        // 1d8: bipush 1
        // 1d9: istore 12
        // 1db: goto 1e1
        // 1de: goto 05b
        // 1e1: iload 12
        // 1e3: tableswitch -179 0 11 -321 -179 -110 -97 -91 -123 -79 -73 -53 -66 -46 -85
        // 220: return
    }
}
