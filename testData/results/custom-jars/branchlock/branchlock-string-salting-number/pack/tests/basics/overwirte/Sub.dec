package pack.tests.basics.overwirte;

public class Sub extends Super {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public Sub(int var1) {
        super(14474);
    }

    @Override
    public void run(int var1) {
        System.out.println(this.face(1, 8362));
    }

    @Override
    public String face(int var1, int var2) {
        return var1 == 1 ? d[var2 ^ 8362] : d[var2 ^ 8363];
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "\u001bໄໄￗ7ﾝ\u0e7e4ﾏ\u0014("
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 0
        // 00b: swap
        // 00c: bipush 7
        // 00e: caload
        // 00f: aload 0
        // 010: dup
        // 011: bipush 7
        // 013: swap
        // 014: bipush 0
        // 015: caload
        // 016: castore
        // 017: castore
        // 018: aload 0
        // 019: dup
        // 01a: bipush 6
        // 01c: swap
        // 01d: bipush 2
        // 01e: caload
        // 01f: aload 0
        // 020: dup
        // 021: bipush 2
        // 022: swap
        // 023: bipush 6
        // 025: caload
        // 026: castore
        // 027: castore
        // 028: aload 0
        // 029: dup
        // 02a: bipush 2
        // 02b: swap
        // 02c: bipush 0
        // 02d: caload
        // 02e: aload 0
        // 02f: dup
        // 030: bipush 0
        // 031: swap
        // 032: bipush 2
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 7
        // 03a: swap
        // 03b: bipush 14
        // 03d: caload
        // 03e: aload 0
        // 03f: dup
        // 040: bipush 14
        // 042: swap
        // 043: bipush 7
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: aload 0
        // 049: dup
        // 04a: bipush 6
        // 04c: swap
        // 04d: bipush 2
        // 04e: caload
        // 04f: aload 0
        // 050: dup
        // 051: bipush 2
        // 052: swap
        // 053: bipush 6
        // 055: caload
        // 056: castore
        // 057: castore
        // 058: goto 175
        // 05b: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 05e: bipush 0
        // 05f: aaload
        // 060: astore 4
        // 062: aload 4
        // 064: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 067: invokevirtual java/lang/String.hashCode ()I
        // 06a: ldc 65535
        // 06c: iand
        // 06d: istore 5
        // 06f: aload 4
        // 071: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 074: invokevirtual java/lang/String.toCharArray ()[C
        // 077: astore 6
        // 079: aload 0
        // 07a: iload 1
        // 07b: iinc 1 1
        // 07e: caload
        // 07f: sipush 213
        // 082: ixor
        // 083: iload 5
        // 085: ixor
        // 086: anewarray 39
        // 089: astore 7
        // 08b: bipush 0
        // 08c: istore 8
        // 08e: aload 0
        // 08f: iload 1
        // 090: iinc 1 1
        // 093: caload
        // 094: bipush 105
        // 096: ixor
        // 097: iload 5
        // 099: ixor
        // 09a: istore 2
        // 09b: iload 2
        // 09c: newarray 5
        // 09e: astore 9
        // 0a0: bipush 0
        // 0a1: istore 10
        // 0a3: iload 2
        // 0a4: ifle 156
        // 0a7: aload 0
        // 0a8: iload 1
        // 0a9: caload
        // 0aa: istore 11
        // 0ac: aload 6
        // 0ae: iload 1
        // 0af: aload 6
        // 0b1: arraylength
        // 0b2: irem
        // 0b3: caload
        // 0b4: bipush 123
        // 0b6: ixor
        // 0b7: lookupswitch 137 16 8 193 9 219 11 225 12 238 13 244 14 250 15 256 16 263 18 276 20 283 24 297 25 304 26 311 30 318 40 206 85 290
        // 140: aload 9
        // 142: iload 10
        // 144: iload 11
        // 146: castore
        // 147: iinc 10 1
        // 14a: iinc 1 1
        // 14d: iinc 2 -1
        // 150: bipush 0
        // 151: istore 12
        // 153: goto 1ff
        // 156: aload 7
        // 158: iload 8
        // 15a: iinc 8 1
        // 15d: new java/lang/String
        // 160: dup
        // 161: aload 9
        // 163: invokespecial java/lang/String.<init> ([C)V
        // 166: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 169: aastore
        // 16a: iload 1
        // 16b: aload 0
        // 16c: arraylength
        // 16d: if_icmplt 08e
        // 170: aload 7
        // 172: putstatic pack/tests/basics/overwirte/Sub.d [Ljava/lang/String;
        // 175: goto 248
        // 178: iload 11
        // 17a: bipush 93
        // 17c: ixor
        // 17d: istore 11
        // 17f: bipush 1
        // 180: istore 12
        // 182: goto 1ff
        // 185: iload 11
        // 187: bipush 100
        // 189: ixor
        // 18a: istore 11
        // 18c: bipush 1
        // 18d: istore 12
        // 18f: goto 1ff
        // 192: bipush 2
        // 193: istore 12
        // 195: goto 1ff
        // 198: iload 11
        // 19a: bipush -50
        // 19c: ixor
        // 19d: istore 11
        // 19f: bipush 1
        // 1a0: istore 12
        // 1a2: goto 1ff
        // 1a5: bipush 3
        // 1a6: istore 12
        // 1a8: goto 1ff
        // 1ab: bipush 4
        // 1ac: istore 12
        // 1ae: goto 1ff
        // 1b1: bipush 5
        // 1b2: istore 12
        // 1b4: goto 1ff
        // 1b7: bipush 6
        // 1b9: istore 12
        // 1bb: goto 1ff
        // 1be: iload 11
        // 1c0: bipush -106
        // 1c2: ixor
        // 1c3: istore 11
        // 1c5: bipush 1
        // 1c6: istore 12
        // 1c8: goto 1ff
        // 1cb: bipush 7
        // 1cd: istore 12
        // 1cf: goto 1ff
        // 1d2: bipush 8
        // 1d4: istore 12
        // 1d6: goto 1ff
        // 1d9: bipush 9
        // 1db: istore 12
        // 1dd: goto 1ff
        // 1e0: bipush 10
        // 1e2: istore 12
        // 1e4: goto 1ff
        // 1e7: bipush 11
        // 1e9: istore 12
        // 1eb: goto 1ff
        // 1ee: bipush 12
        // 1f0: istore 12
        // 1f2: goto 1ff
        // 1f5: bipush 13
        // 1f7: istore 12
        // 1f9: goto 1ff
        // 1fc: goto 05b
        // 1ff: iload 12
        // 201: tableswitch -86 0 13 -350 -193 -137 -124 -105 -92 -86 -74 -111 -80 -40 -67 -47 -33
        // 248: return
    }
}
