package pack.tests.basics.cross;

public class Top extends Abst1 implements Inte {
    public int BRANCHLOCK_DOT_NET_DEMO;

    public Top(int var1) {
        super(var1 ^ var1 ^ 4545);
    }

    public void run(int var1) {
        if (this.add(1, var1 ^ 29788, (var1 | var1 ^ 32383) & (var1 ^ 20415)) == (var1 ^ 29789)
            && this.mul(var1 ^ 29788, var1 ^ 29789, var1 ^ var1 ^ 16549) == (var1 ^ 29784)) {
            System.out.println(d[var1 ^ 29791]);
        } else {
            System.out.println(d[var1 ^ 29790]);
        }
    }

    @Override
    public int add(int var1, int var2, int var3) {
        return var1 + var2;
    }

    static {
        // $VF: Couldn't be decompiled
        // Please report this to the Vineflower issue tracker, at https://github.com/Vineflower/vineflower/issues with a copy of the class file (if you have the rights to distribute it!)
        // java.lang.RuntimeException: parsing failure!
        //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java:211)
        //   at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java:166)
        //
        // Bytecode:
        // 000: ldc "ﾲູﾫ\u0011\u0003:ູ\u00007ﾨ\u0e5e"
        // 002: invokevirtual java/lang/String.toCharArray ()[C
        // 005: astore 0
        // 006: bipush 0
        // 007: istore 1
        // 008: aload 0
        // 009: dup
        // 00a: bipush 0
        // 00b: swap
        // 00c: bipush 4
        // 00d: caload
        // 00e: aload 0
        // 00f: dup
        // 010: bipush 4
        // 011: swap
        // 012: bipush 0
        // 013: caload
        // 014: castore
        // 015: castore
        // 016: aload 0
        // 017: dup
        // 018: bipush 0
        // 019: swap
        // 01a: bipush 9
        // 01c: caload
        // 01d: aload 0
        // 01e: dup
        // 01f: bipush 9
        // 021: swap
        // 022: bipush 0
        // 023: caload
        // 024: castore
        // 025: castore
        // 026: aload 0
        // 027: dup
        // 028: bipush 10
        // 02a: swap
        // 02b: bipush 0
        // 02c: caload
        // 02d: aload 0
        // 02e: dup
        // 02f: bipush 0
        // 030: swap
        // 031: bipush 10
        // 033: caload
        // 034: castore
        // 035: castore
        // 036: aload 0
        // 037: dup
        // 038: bipush 7
        // 03a: swap
        // 03b: bipush 12
        // 03d: caload
        // 03e: aload 0
        // 03f: dup
        // 040: bipush 12
        // 042: swap
        // 043: bipush 7
        // 045: caload
        // 046: castore
        // 047: castore
        // 048: aload 0
        // 049: dup
        // 04a: bipush 0
        // 04b: swap
        // 04c: bipush 0
        // 04d: caload
        // 04e: aload 0
        // 04f: dup
        // 050: bipush 0
        // 051: swap
        // 052: bipush 0
        // 053: caload
        // 054: castore
        // 055: castore
        // 056: goto 15d
        // 059: invokevirtual java/lang/Throwable.getStackTrace ()[Ljava/lang/StackTraceElement;
        // 05c: bipush 0
        // 05d: aaload
        // 05e: astore 4
        // 060: aload 4
        // 062: invokevirtual java/lang/StackTraceElement.getMethodName ()Ljava/lang/String;
        // 065: invokevirtual java/lang/String.hashCode ()I
        // 068: ldc 65535
        // 06a: iand
        // 06b: istore 5
        // 06d: aload 4
        // 06f: invokevirtual java/lang/StackTraceElement.getClassName ()Ljava/lang/String;
        // 072: invokevirtual java/lang/String.toCharArray ()[C
        // 075: astore 6
        // 077: aload 0
        // 078: iload 1
        // 079: iinc 1 1
        // 07c: caload
        // 07d: sipush 245
        // 080: ixor
        // 081: iload 5
        // 083: ixor
        // 084: anewarray 42
        // 087: astore 7
        // 089: bipush 0
        // 08a: istore 8
        // 08c: aload 0
        // 08d: iload 1
        // 08e: iinc 1 1
        // 091: caload
        // 092: bipush 20
        // 094: ixor
        // 095: iload 5
        // 097: ixor
        // 098: istore 2
        // 099: iload 2
        // 09a: newarray 5
        // 09c: astore 9
        // 09e: bipush 0
        // 09f: istore 10
        // 0a1: iload 2
        // 0a2: ifle 13e
        // 0a5: aload 0
        // 0a6: iload 1
        // 0a7: caload
        // 0a8: istore 11
        // 0aa: aload 6
        // 0ac: iload 1
        // 0ad: aload 6
        // 0af: arraylength
        // 0b0: irem
        // 0b1: caload
        // 0b2: bipush 29
        // 0b4: ixor
        // 0b5: lookupswitch 115 13 51 235 73 184 105 171 109 197 110 210 111 223 114 229 116 241 118 247 120 254 124 261 126 268 127 275
        // 128: aload 9
        // 12a: iload 10
        // 12c: iload 11
        // 12e: castore
        // 12f: iinc 10 1
        // 132: iinc 1 1
        // 135: iinc 2 -1
        // 138: bipush 0
        // 139: istore 12
        // 13b: goto 1d2
        // 13e: aload 7
        // 140: iload 8
        // 142: iinc 8 1
        // 145: new java/lang/String
        // 148: dup
        // 149: aload 9
        // 14b: invokespecial java/lang/String.<init> ([C)V
        // 14e: invokevirtual java/lang/String.intern ()Ljava/lang/String;
        // 151: aastore
        // 152: iload 1
        // 153: aload 0
        // 154: arraylength
        // 155: if_icmplt 08c
        // 158: aload 7
        // 15a: putstatic pack/tests/basics/cross/Top.d [Ljava/lang/String;
        // 15d: goto 210
        // 160: iload 11
        // 162: bipush 118
        // 164: ixor
        // 165: istore 11
        // 167: bipush 1
        // 168: istore 12
        // 16a: goto 1d2
        // 16d: iload 11
        // 16f: bipush -19
        // 171: ixor
        // 172: istore 11
        // 174: bipush 1
        // 175: istore 12
        // 177: goto 1d2
        // 17a: iload 11
        // 17c: bipush -5
        // 17e: ixor
        // 17f: istore 11
        // 181: bipush 1
        // 182: istore 12
        // 184: goto 1d2
        // 187: iload 11
        // 189: bipush 80
        // 18b: ixor
        // 18c: istore 11
        // 18e: bipush 1
        // 18f: istore 12
        // 191: goto 1d2
        // 194: bipush 2
        // 195: istore 12
        // 197: goto 1d2
        // 19a: bipush 3
        // 19b: istore 12
        // 19d: goto 1d2
        // 1a0: bipush 4
        // 1a1: istore 12
        // 1a3: goto 1d2
        // 1a6: bipush 5
        // 1a7: istore 12
        // 1a9: goto 1d2
        // 1ac: bipush 6
        // 1ae: istore 12
        // 1b0: goto 1d2
        // 1b3: bipush 7
        // 1b5: istore 12
        // 1b7: goto 1d2
        // 1ba: bipush 8
        // 1bc: istore 12
        // 1be: goto 1d2
        // 1c1: bipush 9
        // 1c3: istore 12
        // 1c5: goto 1d2
        // 1c8: bipush 10
        // 1ca: istore 12
        // 1cc: goto 1d2
        // 1cf: goto 059
        // 1d2: iload 12
        // 1d4: tableswitch -77 0 10 -307 -172 -77 -64 -90 -116 -58 -103 -46 -33 -40
        // 210: return
    }
}
